/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.c2psi.bmv1.api;

import com.c2psi.bmv1.dto.ClientDto;
import com.c2psi.bmv1.dto.FilterRequest;
import com.c2psi.bmv1.dto.PageofClientDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-30T16:03:01.698280900+01:00[Africa/Casablanca]")
@Validated
@Api(value = "client", description = "the client API")
public interface ClientApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /client/bm/v1/delete/{id} : Path used to delete a client in the system with its id
     *
     * @param id The id that represent the client to delete. It&#39;s compulsory if not the operation can&#39;t proceed (required)
     * @return Client deleted successfully (status code 200)
     *         or Bad request. Loading ID must be an integer and larger than 0. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to delete a client in the system with its id", nickname = "deleteClientById", notes = "", response = Boolean.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client deleted successfully", response = Boolean.class),
        @ApiResponse(code = 400, message = "Bad request. Loading ID must be an integer and larger than 0."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/client/bm/v1/delete/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Boolean> _deleteClientById(@ApiParam(value = "The id that represent the client to delete. It's compulsory if not the operation can't proceed", required = true) @PathVariable("id") Long id) {
        return deleteClientById(id);
    }

    // Override this method
    default  ResponseEntity<Boolean> deleteClientById(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /client/bm/v1/getby/{id} : Find a Client in the system by its id
     *
     * @param id The id that represent the Client found. It&#39;s compulsory if not the operation can&#39;t proceed (required)
     * @return Client found successfully (status code 200)
     *         or Bad request. Client ID must be an integer and larger than 0. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Find a Client in the system by its id", nickname = "getClientById", notes = "", response = ClientDto.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client found successfully", response = ClientDto.class),
        @ApiResponse(code = 400, message = "Bad request. Client ID must be an integer and larger than 0."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/client/bm/v1/getby/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientDto> _getClientById(@ApiParam(value = "The id that represent the Client found. It's compulsory if not the operation can't proceed", required = true) @PathVariable("id") Long id) {
        return getClientById(id);
    }

    // Override this method
    default  ResponseEntity<ClientDto> getClientById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /client/bm/v1/list : Path used to list client that respect certain criteria. A criteria is an instance of a Filter object
     *
     * @param filterRequest  (optional)
     * @return Client list found successfully (status code 200)
     */
    @ApiOperation(value = "Path used to list client that respect certain criteria. A criteria is an instance of a Filter object", nickname = "getClientList", notes = "", response = ClientDto.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client list found successfully", response = ClientDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/client/bm/v1/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ClientDto>> _getClientList(@ApiParam(value = "") @Valid @RequestBody(required = false) FilterRequest filterRequest) {
        return getClientList(filterRequest);
    }

    // Override this method
    default  ResponseEntity<List<ClientDto>> getClientList(FilterRequest filterRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /client/bm/v1/page : Path used to list client page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
     *
     * @param filterRequest  (optional)
     * @return Client page found successfully (status code 200)
     */
    @ApiOperation(value = "Path used to list client page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want", nickname = "getClientPage", notes = "", response = PageofClientDto.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client page found successfully", response = PageofClientDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/client/bm/v1/page",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PageofClientDto> _getClientPage(@ApiParam(value = "") @Valid @RequestBody(required = false) FilterRequest filterRequest) {
        return getClientPage(filterRequest);
    }

    // Override this method
    default  ResponseEntity<PageofClientDto> getClientPage(FilterRequest filterRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalPages\" : 6, \"pageSize\" : 10, \"currentPage\" : 0, \"content\" : [ { \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } }, { \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } } ], \"totalElements\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /client/bm/v1/create : Path used to save a new Client in the system
     *
     * @param clientDto  (optional)
     * @return Client saved successfully (status code 200)
     *         or Bad request. There is something wrong in the request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to save a new Client in the system", nickname = "saveClient", notes = "", response = ClientDto.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client saved successfully", response = ClientDto.class),
        @ApiResponse(code = 400, message = "Bad request. There is something wrong in the request."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/client/bm/v1/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientDto> _saveClient(@ApiParam(value = "") @Valid @RequestBody(required = false) ClientDto clientDto) {
        return saveClient(clientDto);
    }

    // Override this method
    default  ResponseEntity<ClientDto> saveClient(ClientDto clientDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /client/bm/v1/update : Path used to update or modify an existing Client in the system
     *
     * @param clientDto  (optional)
     * @return Client updated successfully (status code 200)
     *         or Bad request. There is something wrong in the request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to update or modify an existing Client in the system", nickname = "updateClient", notes = "", response = ClientDto.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client updated successfully", response = ClientDto.class),
        @ApiResponse(code = 400, message = "Bad request. There is something wrong in the request."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/client/bm/v1/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientDto> _updateClient(@ApiParam(value = "") @Valid @RequestBody(required = false) ClientDto clientDto) {
        return updateClient(clientDto);
    }

    // Override this method
    default  ResponseEntity<ClientDto> updateClient(ClientDto clientDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientCni\" : \"clientCni\", \"clientBalance\" : 0.6027456183070403, \"clientPosId\" : 1, \"clientName\" : \"clientName\", \"id\" : 0, \"clientOthername\" : \"clientOthername\", \"clientAddress\" : { \"country\" : \"country\", \"numtel3\" : \"numtel3\", \"town\" : \"town\", \"numtel1\" : \"678470262\", \"numtel2\" : \"numtel2\", \"localisation\" : \"localisation\", \"id\" : 0, \"email\" : \"abc@gmail.com\", \"quarter\" : \"quarter\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
