/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.c2psi.bmv1.api;

import com.c2psi.bmv1.dto.BasepriceDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-28T04:24:19.978343600+01:00[Africa/Casablanca]")
@Validated
@Api(value = "bp", description = "the bp API")
public interface BpApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /bp/bm/v1/delete/{id} : Path used to delete a baseprice in the system with its id
     *
     * @param id The id that represent the Baseprice to delete. It&#39;s compulsory if not the operation can&#39;t proceed (required)
     * @return Baseprice deleted successfully (status code 200)
     *         or Bad request. Baseprice ID must be an integer and larger than 0. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to delete a baseprice in the system with its id", nickname = "deleteBasepriceById", notes = "", response = Boolean.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Baseprice deleted successfully", response = Boolean.class),
        @ApiResponse(code = 400, message = "Bad request. Baseprice ID must be an integer and larger than 0."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bp/bm/v1/delete/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Boolean> _deleteBasepriceById(@ApiParam(value = "The id that represent the Baseprice to delete. It's compulsory if not the operation can't proceed", required = true) @PathVariable("id") Long id) {
        return deleteBasepriceById(id);
    }

    // Override this method
    default  ResponseEntity<Boolean> deleteBasepriceById(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bp/bm/v1/getby/{id} : Find a Baseprice in the system by its id
     *
     * @param id The id that represent the Baseprice found. It&#39;s compulsory if not the operation can&#39;t proceed (required)
     * @return Baseprice found successfully (status code 200)
     *         or Bad request. Baseprice ID must be an integer and larger than 0. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Find a Baseprice in the system by its id", nickname = "getBasepriceById", notes = "", response = BasepriceDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Baseprice found successfully", response = BasepriceDto.class),
        @ApiResponse(code = 400, message = "Bad request. Baseprice ID must be an integer and larger than 0."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bp/bm/v1/getby/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BasepriceDto> _getBasepriceById(@ApiParam(value = "The id that represent the Baseprice found. It's compulsory if not the operation can't proceed", required = true) @PathVariable("id") Long id) {
        return getBasepriceById(id);
    }

    // Override this method
    default  ResponseEntity<BasepriceDto> getBasepriceById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bpSemiwholeprice\" : 0.5962133916683182, \"bpPurchaseprice\" : 0.6027456183070403, \"bpDetailsprice\" : 0.5637376656633328, \"id\" : 0, \"bpRistourne\" : 0, \"bpCurrency\" : { \"currencyName\" : \"franc cfa\", \"currencyAbbreviation\" : \"F cfa\", \"id\" : 2 }, \"bpPosId\" : 7, \"bpCode\" : \"BP0001\", \"bpWholeprice\" : 0.14658129805029452, \"bpPrecompte\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /bp/bm/v1/create : Path used to save a new Baseprice of an article in the system
     *
     * @param basepriceDto  (optional)
     * @return Baseprice of an article saved successfully (status code 200)
     *         or Bad request. There is something wrong in the request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to save a new Baseprice of an article in the system", nickname = "saveBaseprice", notes = "", response = BasepriceDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Baseprice of an article saved successfully", response = BasepriceDto.class),
        @ApiResponse(code = 400, message = "Bad request. There is something wrong in the request."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bp/bm/v1/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BasepriceDto> _saveBaseprice(@ApiParam(value = "") @Valid @RequestBody(required = false) BasepriceDto basepriceDto) {
        return saveBaseprice(basepriceDto);
    }

    // Override this method
    default  ResponseEntity<BasepriceDto> saveBaseprice(BasepriceDto basepriceDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bpSemiwholeprice\" : 0.5962133916683182, \"bpPurchaseprice\" : 0.6027456183070403, \"bpDetailsprice\" : 0.5637376656633328, \"id\" : 0, \"bpRistourne\" : 0, \"bpCurrency\" : { \"currencyName\" : \"franc cfa\", \"currencyAbbreviation\" : \"F cfa\", \"id\" : 2 }, \"bpPosId\" : 7, \"bpCode\" : \"BP0001\", \"bpWholeprice\" : 0.14658129805029452, \"bpPrecompte\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /bp/bm/v1/update : Path used to update or modify an existing Baseprice in the system
     *
     * @param basepriceDto  (optional)
     * @return Baseprice updated successfully (status code 200)
     *         or Bad request. There is something wrong in the request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 401)
     *         or The user who ask the ressource is Forbidden. (status code 403)
     *         or The expected ressource is not found. (status code 404)
     *         or Unexpected error at the server side. (status code 500)
     */
    @ApiOperation(value = "Path used to update or modify an existing Baseprice in the system", nickname = "updateBaseprice", notes = "", response = BasepriceDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Baseprice updated successfully", response = BasepriceDto.class),
        @ApiResponse(code = 400, message = "Bad request. There is something wrong in the request."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 403, message = "The user who ask the ressource is Forbidden."),
        @ApiResponse(code = 404, message = "The expected ressource is not found."),
        @ApiResponse(code = 500, message = "Unexpected error at the server side.") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/bp/bm/v1/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BasepriceDto> _updateBaseprice(@ApiParam(value = "") @Valid @RequestBody(required = false) BasepriceDto basepriceDto) {
        return updateBaseprice(basepriceDto);
    }

    // Override this method
    default  ResponseEntity<BasepriceDto> updateBaseprice(BasepriceDto basepriceDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bpSemiwholeprice\" : 0.5962133916683182, \"bpPurchaseprice\" : 0.6027456183070403, \"bpDetailsprice\" : 0.5637376656633328, \"id\" : 0, \"bpRistourne\" : 0, \"bpCurrency\" : { \"currencyName\" : \"franc cfa\", \"currencyAbbreviation\" : \"F cfa\", \"id\" : 2 }, \"bpPosId\" : 7, \"bpCode\" : \"BP0001\", \"bpWholeprice\" : 0.14658129805029452, \"bpPrecompte\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
