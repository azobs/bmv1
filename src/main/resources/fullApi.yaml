openapi: 3.0.3
info:
  title: Bussiness management api
  description: This is used to describe the api of our future application used to manage bussiness
  version: 1.0.0
  contact:
    name: C2PSI company
    url: https://www.c2psi-prestation.com
    email: c2psi-prestation@gmail.com
servers:
  - url: '{protocol}://{host}:{port}'
    description: All endpoint for Demoopenapi api
    variables:
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'
      host:
        default: localhost
        description: The local server where the Demoopenapi api is located
      port:
        enum:
          - '8080'
          - '8081'
        default: '8081'
        description: The default port where the Demoopenapi api responds
paths:
  /test/non_secure:
    get:
      operationId: apiTest
      responses:
        '200':
          description: Sucessfull Test Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto'
  /test/secure:
    get:
      operationId: apiTest Secure
      responses:
        '200':
          description: Sucessfull Test secure Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto'
  /test/bm/v1/securebmv1:
    get:
      operationId: apiTest Securebmv1
      responses:
        '200':
          description: Sucessfull Test secure Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto'
  ########################################################################################################################
  #Api for Address management
  ##------------------------------------------------Start Create addresss
  /address/bm/v1/create:
    post:
      summary: Path used to save a new address in the system
      operationId: saveAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDto'
      responses:
        '200':
          description: Address saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an address in the system
    description: Add or save a new Address in the system
  ##------------------------------------------------End Create addresss
  ##------------------------------------------------Start delete addresss
  /address/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete an address in the system with its id
      operationId: deleteAddressById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the address to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an address for this system
    description: Delete an existing address in the system
  ##------------------------------------------------End delete addresss
  ##------------------------------------------------Start get addresss by id
  /address/bm/v1/getby/{id}:
    get:
      summary: Find an Address in the system by its id
      operationId: getAddressById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Address found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Address found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an address for this system
    description: Find an existing address in the system
  ##------------------------------------------------End get addresss by id
#  ##------------------------------------------------Start get addresss by email
  /address/bm/v1/getby/{email}:
    get:
      summary: Find a Address in the system by its email address
      operationId: getAddressByEmail
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: The email that represent the Address found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Address found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
        '400':
          description: Bad request. Email address number must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an address in the system
    description: Find an existing address in the system
#  ##------------------------------------------------End get addresss by email
#  ##------------------------------------------------Start Load file
  /load/bm/v1/picture/{id}:
    get:
      summary: Load a picture
      operationId: loadResourceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id of the element that represent the resource found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Resource found successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
    summary: Represents a route used to load a resource from the system
    description: Download a picture from the system
#  ##------------------------------------------------End Load file
#  ##------------------------------------------------Start Upload file
  /upload/bm/v1/picture:
    post:
      summary: Path used to upload a picture that represent a resource in the system
      operationId: uploadPicture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  nullable: false
                fileName:
                  type: string
                  format: binary
                  nullable: true
      responses:
        '200':
          description: Resource uploaded successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
    summary: Represents a route used to upload a picture in the system
    description: Upload a picture in the system
#  ##------------------------------------------------End Upload file
#  ##------------------------------------------------Start update address
  /address/bm/v1/update:
    put:
      summary: Path used to update or modify an existing address in the system
      operationId: updateAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDto'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an address for this system
    description: Update an existing address in the system
#  ##------------------------------------------------End update address
#########################################################################################################################
#  ##------------------------------------------------Start Create Userbm
  /userbm/bm/v1/create:
    post:
      summary: Path used to save a new user in the system
      operationId: saveUserbm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserbmDto'
      responses:
        '200':
          description: Userbm saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a user for this system
    description: Add or save a new User in the system
#  ##------------------------------------------------End Create Userbm
#  ##------------------------------------------------Start delete Userbm
  /userbm/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a userbm in the system with its id
      operationId: deleteUserbmById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Userbm to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a user for this system
    description: Delete an existing user in the system
#  ##------------------------------------------------End delete Userbm
#  ##------------------------------------------------Start get by cni Userbm
  /userbm/bm/v1/getby/{cni}:
    get:
      summary: Find a Userbm in the system by its cni number
      operationId: getUserbmByCni
      parameters:
        - in: path
          name: cni
          schema:
            type: string
          required: true
          description: The cni number that represent the Userbm found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. User cni number must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a user for this system
    description: Find an existing user in the system
#  ##------------------------------------------------End get by cni Userbm
#  ##------------------------------------------------Start get by email Userbm
  /userbm/bm/v1/getby/{email}:
    get:
      summary: Find a Userbm in the system by its email address
      operationId: getUserbmByEmail
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: The email that represent the Userbm found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. User email address number must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a user in the system
    description: Find an existing user in the system
#  ##------------------------------------------------End get by email Userbm
#  ##------------------------------------------------Start get by login Userbm
  /userbm/bm/v1/getby/{login}:
    get:
      summary: Find a Userbm in the system by its login
      operationId: getUserbmByLogin
      parameters:
        - in: path
          name: login
          schema:
            type: string
          required: true
          description: The login that represent the Userbm found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. User login must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a user for this system
    description: Find an existing user in the system
#  ##------------------------------------------------End get by login Userbm
#  ##------------------------------------------------Start get by id Userbm
  /userbm/bm/v1/getby/{id}:
    get:
      summary: Find a Userbm in the system by its id
      operationId: getUserbmById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Userbm found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a user for this system
    description: Find an existing user in the system
#  ##------------------------------------------------End get by id Userbm
#  ##------------------------------------------------Start getList Userbm
  /userbm/bm/v1/list:
    post:
      summary: Path used to list user that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getUserbmList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Userbm list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/UserbmDto'
#  ##------------------------------------------------End getList Userbm
#  ##------------------------------------------------Start getPage Userbm
  /userbm/bm/v1/page:
    post:
      summary: Path used to list users page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getUserbmPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Userbm page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofUserbmDto'
#  ##------------------------------------------------End getPage Userbm
#  ##------------------------------------------------Start update address
  /userbm/bm/v1/update:
    put:
      summary: Path used to update or modify an existing user in the system
      operationId: updateUserbm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserbmDto'
      responses:
        '200':
          description: Userbm updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a user for this system
    description: Update an existing user in the system
#  ##------------------------------------------------End update address
#########################################################################################################################
#  ##------------------------------------------------Start Create Enterprise
  /enterprise/bm/v1/create:
    post:
      summary: Path used to save a new Enterprise in the system
      operationId: saveEnterprise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseDto'
      responses:
        '200':
          description: Enterprise saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a enterprise for this system
    description: Add or save a new Enterprise in the system
#  ##------------------------------------------------End Create Enterprise
#  ##------------------------------------------------Start delete Enterprise
  /enterprise/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a Enterprise in the system with its id
      operationId: deleteEnterpriseById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Enterprise to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Enterprise deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Article ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a enterprise for this system
    description: Delete an existing enterprise in the system
#  ##------------------------------------------------End delete Enterprise
#  ##------------------------------------------------Start get by id Enterprise
  /enterprise/bm/v1/getby/{id}:
    get:
      summary: Find an Enterprise in the system by its id
      operationId: getEnterpriseById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Enterprise found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Enterprise found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
        '400':
          description: Bad request. Enterprise ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Enterprise for this system
    description: Find an existing Enterprise in the system
#  ##------------------------------------------------End get by id Enterprise
#  ##------------------------------------------------Start getList Enterprise
  /enterprise/bm/v1/list:
    post:
      summary: Path used to list enterprise that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getEnterpriseList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Enterprise list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/EnterpriseDto'
#  ##------------------------------------------------End getList Enterprise
#  ##------------------------------------------------Start getPage Enterprise
  /enterprise/bm/v1/page:
    post:
      summary: Path used to list Enterprise page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getEnterprisePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Enterprise page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofEnterpriseDto'
#  ##------------------------------------------------End getPage Enterprise
#  ##------------------------------------------------Start update Enterprise
  /enterprise/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Enterprise in the system
      operationId: updateEnterprise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseDto'
      responses:
        '200':
          description: Enterprise updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a enterprise for this system
    description: Update an existing enterprise in the system
#  ##------------------------------------------------End update Enterprise
#########################################################################################################################
#  ##------------------------------------------------Start Create Currency
  /currency/bm/v1/create:
    post:
      summary: Path used to save a new Currency of product in the system
      operationId: saveCurrency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyDto'
      responses:
        '200':
          description: Currency saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a currency for this system
    description: Add or save a new Currency in the system
#  ##------------------------------------------------End Create Currency
#  ##------------------------------------------------Start delete Currency
  /currency/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a currency in the system with its id
      operationId: deleteCurrencyById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Currency to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Currency deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Currency ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a currency for this system
    description: Delete an existing currency in the system
#  ##------------------------------------------------End delete Currency
#  ##------------------------------------------------Start get by id Currency
  /currency/bm/v1/getby/{id}:
    get:
      summary: Find a Currency in the system by its id
      operationId: getCurrencyById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Currency found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Currency found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDto'
        '400':
          description: Bad request. Currency ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Currency for this system
    description: Find an existing currency in the system
#  ##------------------------------------------------End get by id Currency
#  ##------------------------------------------------Start getList Currency
  /currency/bm/v1/list:
    post:
      summary: Path used to list currency that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getCurrencyList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Currency list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/CurrencyDto'
#  ##------------------------------------------------End getList Currency
#  ##------------------------------------------------Start getPage Currency
  /currency/bm/v1/page:
    post:
      summary: Path used to list currency page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getCurrencyPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Currency page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofCurrencyDto'
#  ##------------------------------------------------End getPage Currency
#  ##------------------------------------------------Start update Currency
  /currency/bm/v1/update:
    put:
      summary: Path used to update or modify an existing currency in the system
      operationId: updateCurrency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyDto'
      responses:
        '200':
          description: Currency updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a currency for this system
    description: Update an existing currency in the system
#  ##------------------------------------------------End update Currency
#########################################################################################################################
#  ##------------------------------------------------Start Create CurrencyconversionDto
  /currency/bm/v1/conversion/create:
    post:
      summary: Path used to save a new Currencyconversion of product in the system
      operationId: saveCurrencyconversion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyconversionDto'
      responses:
        '200':
          description: Currencyconversion saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyconversionDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a currencyconversion for this system
    description: Add or save a new Currencyconversion in the system
#  ##------------------------------------------------End Create CurrencyconversionDto
#  ##------------------------------------------------Start delete CurrencyconversionDto
  /currency/bm/v1/conversion/delete/{id}:
    delete:
      summary: Path used to delete a currency conversion in the system with its id
      operationId: deleteCurrencyconversionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Currencyconversion to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Currencyconversion deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Unitconversion ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a currencyconversion for this system
    description: Delete an existing currencyconversion in the system
#  ##------------------------------------------------End delete CurrencyconversionDto
#  ##------------------------------------------------Start get by id CurrencyconversionDto
  /currency/bm/v1/conversion/getby/{id}:
    get:
      summary: Find a Currencyconversion in the system by its id
      operationId: getCurrencyconversionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Currencyconversion found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Currencyconversion found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyconversionDto'
        '400':
          description: Bad request. Currencyconversion ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a currencyconversion for this system
    description: Find an existing currencyconversion in the system
#  ##------------------------------------------------End get by id CurrencyconversionDto
#  ##------------------------------------------------Start getList CurrencyconversionDto
  /currency/bm/v1/conversion/list:
    post:
      summary: Path used to list currencyconversion that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getCurrencyconversionList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Currencyconversion list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/CurrencyconversionDto'
#  ##------------------------------------------------End getList CurrencyconversionDto
#  ##------------------------------------------------Start getPage CurrencyconversionDto
  /currency/bm/v1/conversion/page:
    post:
      summary: Path used to list currencyconversion page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getCurrencyconversionPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Currencyconversion page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofCurrencyconversionDto'
#  ##------------------------------------------------End getPage CurrencyconversionDto
#  ##------------------------------------------------Start update CurrencyconversionDto
  /currency/bm/v1/conversion/update:
    put:
      summary: Path used to update or modify an existing currencyconversion in the system
      operationId: updateCurrencyconversion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyconversionDto'
      responses:
        '200':
          description: Currencyconversion updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyconversionDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a currencyconversion for this system
    description: Update an existing currencyconversion in the system
#  ##------------------------------------------------End update CurrencyconversionDto
#########################################################################################################################
#  ##------------------------------------------------Start Create PointofsaleDto
  /pos/bm/v1/create:
    post:
      summary: Path used to save a new Pointofsale in the system
      operationId: savePos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointofsaleDto'
      responses:
        '200':
          description: Pointofsale saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointofsaleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a pointofsale for this system
    description: Add or save a new Pointofsale in the system
#  ##------------------------------------------------End Create PointofsaleDto
#  ##------------------------------------------------Start delete PointofsaleDto
  /pos/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a pointofsale in the system with its id
      operationId: deletePosById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Pointofsale to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Pointofsale deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Article ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a pointofsale for this system
    description: Delete an existing pointofsale in the system
#  ##------------------------------------------------End delete PointofsaleDto
#  ##------------------------------------------------Start get by id PointofsaleDto
  /pos/bm/v1/getby/{id}:
    get:
      summary: Find an Pointofsale in the system by its id
      operationId: getPosById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Pointofsale found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Pointofsale found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointofsaleDto'
        '400':
          description: Bad request. Pointofsale ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Pointofsale for this system
    description: Find an existing pointofsale in the system
#  ##------------------------------------------------End get by id PointofsaleDto
#  ##------------------------------------------------Start getList PointofsaleDto
  /pos/bm/v1/list:
    post:
      summary: Path used to list pointofsale that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getPosList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Pointofsale list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/PointofsaleDto'
#  ##------------------------------------------------End getList PointofsaleDto
#  ##------------------------------------------------Start getPage PointofsaleDto
  /pos/bm/v1/page:
    post:
      summary: Path used to list Pointofsale page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getPosPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Pointofsale page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofPointofsaleDto'
#  ##------------------------------------------------End getPage PointofsaleDto
#  ##------------------------------------------------Start update PointofsaleDto
  /pos/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Pointofsale in the system
      operationId: updatePos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointofsaleDto'
      responses:
        '200':
          description: Pointofsale updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointofsaleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a pointofsale for this system
    description: Update an existing pointofsale in the system
#  ##------------------------------------------------End update PointofsaleDto
########################################################################################################################
#  ##------------------------------------------------Start Create RoleDto
  /role/bm/v1/create:
    post:
      summary: Path used to save a new role in the system
      operationId: saveRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDto'
      responses:
        '200':
          description: Role saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a role for this system
    description: Add or save a new Role in the system
#  ##------------------------------------------------End Create RoleDto
#  ##------------------------------------------------Start delete RoleDto
  /role/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a role in the system with its id
      operationId: deleteRoleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Role to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a role for this system
    description: Delete an existing role in the system
#  ##------------------------------------------------End delete RoleDto
#  ##------------------------------------------------Start get by id RoleDto
  /role/bm/v1/getby/{id}:
    get:
      summary: Find a Role in the system by its id
      operationId: getRoleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Role found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Role found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
        '400':
          description: Bad request. Role ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a role for this system
    description: Find an existing role in the system
#  ##------------------------------------------------End get by id RoleDto
#  ##------------------------------------------------Start get by roleType RoleDto
  /role/bm/v1/getby/{roletype}:
    get:
      summary: Find a Role in the system by its login
      operationId: getRoleByRoletype
      parameters:
        - in: path
          name: roletype
          schema:
            type: string
          required: true
          description: The role type that represent the Role found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Role found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
        '400':
          description: Bad request. Role type must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a role for this system
    description: Find an existing role in the system
#  ##------------------------------------------------End get by roleType RoleDto
#  ##------------------------------------------------Start getList RoleDto
  /role/bm/v1/list:
    post:
      summary: Path used to list role that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getRoleList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Role found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/RoleDto'
#  ##------------------------------------------------End getList RoleDto
#  ##------------------------------------------------Start getPage RoleDto
  /role/bm/v1/page:
    post:
      summary: Path used to list roles page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getRolePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Role page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofRoleDto'
#  ##------------------------------------------------End getPage RoleDto
#  ##------------------------------------------------Start update RoleDto
  /role/bm/v1/update:
    put:
      summary: Path used to update or modify an existing role in the system
      operationId: updateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDto'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a role for this system
    description: Update an existing role in the system
#  ##------------------------------------------------End update RoleDto
#########################################################################################################################
#  ##------------------------------------------------Start Create PermissionDto
  /auth/bm/v1/permission/create:
    post:
      summary: Path used to save a new permission associate to a role in the system
      operationId: savePermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDto'
      responses:
        '200':
          description: Permission saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a permission for this system
    description: Add or save a new Permission in the system
#  ##------------------------------------------------End Create PermissionDto
#  ##------------------------------------------------Start delete PermissionDto
  /auth/bm/v1/permission/delete/{id}:
    delete:
      summary: Path used to delete a permission in the system with its id
      operationId: deletePermissionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Permission to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Permission deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a permission for this system
    description: Delete an existing permission in the system
#  ##------------------------------------------------End delete PermissionDto
#  ##------------------------------------------------Start get by id PermissionDto
  /auth/bm/v1/permission/getby/{id}:
    get:
      summary: Find a Permission in the system by its id
      operationId: getPermissionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Permission found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Permission found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '400':
          description: Bad request. Permission ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a permission for this system
    description: Find an existing permission in the system
#  ##------------------------------------------------End get by id PermissionDto
#  ##------------------------------------------------Start get by name PermissionDto
  /auth/bm/v1/permission/getby/{name}:
    get:
      summary: Find a Permission in the system by its email address
      operationId: getPermissionByName
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: The name that represent the Permission found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Permission found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '400':
          description: Bad request. Permission name must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Permission in the system
    description: Find an existing permission in the system
#  ##------------------------------------------------End get by name PermissionDto
#  ##------------------------------------------------Start getList PermissionDto
  /auth/bm/v1/permission/list:
    post:
      summary: Path used to list permission that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getPermissionList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Permission list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/PermissionDto'
#  ##------------------------------------------------End getList PermissionDto
#  ##------------------------------------------------Start getPage PermissionDto
  /auth/bm/v1/permission/page:
    post:
      summary: Path used to list permission page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getPermissionPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Permission page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofPermissionDto'
#  ##------------------------------------------------End getPage PermissionDto
#########################################################################################################################
#  ##------------------------------------------------Start Create UserbmRoleDto
  /userbm_role/bm/v1/create:
    post:
      summary: Path used to save a new user_role in the system
      operationId: saveUserbmRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserbmRoleDto'
      responses:
        '200':
          description: Userbm_Role saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmRoleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a user_role for this system
    description: Add or save a new User_Role in the system
#  ##------------------------------------------------End Create UserbmRoleDto
#  ##------------------------------------------------Start change permission UserbmRoleDto
  /userbm_role/bm/v1/changepermission:
    put:
      summary: Path used to update or modify an existing user_role in the system
      operationId: updateUserbmRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserbmRolePermissionDto'
      responses:
        '200':
          description: Userbm updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmRoleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a user for this system
    description: Update an existing user in the system
#  ##------------------------------------------------End change permission UserbmRoleDto
#  ##------------------------------------------------Start delete UserbmRoleDto
  /userbm_role/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a userbm_role in the system with its id
      operationId: deleteUserbmRoleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the UserbmRole to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Userbm deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. User ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
#  ##------------------------------------------------End delete UserbmRoleDto
#  ##------------------------------------------------Start get by id UserbmRoleDto
  /userbm_role/bm/v1/getby/{id}:
    get:
      summary: Find a UserbmRole in the system by its id
      operationId: getUserbmRoleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the UserbmRole found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: UserbmRole found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserbmRoleDto'
        '400':
          description: Bad request. UserRole ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a user_role for this system
    description: Find an existing user_role in the system
#  ##------------------------------------------------End get by id UserbmRoleDto
#  ##------------------------------------------------Start getList UserbmRoleDto
  /userbm_role/bm/v1/list:
    post:
      summary: Path used to list user_role that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getUserbmRoleList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: UserbmRole list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/UserbmRoleDto'
#  ##------------------------------------------------End getList UserbmRoleDto
#  ##------------------------------------------------Start getPage UserbmRoleDto
  /userbm_role/bm/v1/page:
    post:
      summary: Path used to list userrole page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getUserbmRolePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: UserbmRole page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofUserbmRoleDto'
#  ##------------------------------------------------End getPage UserbmRoleDto
#########################################################################################################################
#  ##------------------------------------------------Start Create UserbmRolePermissionDto
#  ##------------------------------------------------End Create UserbmRolePermissionDto
#  ##------------------------------------------------Start delete UserbmRolePermissionDto
#  ##------------------------------------------------End delete UserbmRolePermissionDto
#  ##------------------------------------------------Start get by id UserbmRolePermissionDto
#  ##------------------------------------------------End get by id UserbmRolePermissionDto
#  ##------------------------------------------------Start getList UserbmRolePermissionDto
#  ##------------------------------------------------End getList UserbmRolePermissionDto
#  ##------------------------------------------------Start getPage UserbmRolePermissionDto
#  ##------------------------------------------------End getPage UserbmRolePermissionDto
#  ##------------------------------------------------Start update UserbmRolePermissionDto
#  ##------------------------------------------------End update UserbmRolePermissionDto
#########################################################################################################################
#  ##------------------------------------------------Start Create TokenDto
  /auth/bm/v1/token/create:
    post:
      summary: Path used to save a new connexion token in the system
      operationId: saveToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDto'
      responses:
        '200':
          description: Permission saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a token for this system
    description: Add or save a new Token in the system
#  ##------------------------------------------------End Create TokenDto
#  ##------------------------------------------------Start delete TokenDto
  /auth/bm/v1/token/delete/{id}:
    delete:
      summary: Path used to delete a token in the system with its id
      operationId: deleteTokenById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Token to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Token deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Token ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a token for this system
    description: Delete an existing token in the system
#  ##------------------------------------------------End delete TokenDto
#  ##------------------------------------------------Start get by id TokenDto
  /auth/bm/v1/token/getby/{id}:
    get:
      summary: Find a token in the system by its id
      operationId: getTokenById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Token found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Token found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: Bad request. Token ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a token for this system
    description: Find an existing token in the system
#  ##------------------------------------------------End get by id TokenDto
#  ##------------------------------------------------Start get by tokenValue TokenDto
  /auth/bm/v1/token/getby/{tokenValue}:
    get:
      summary: Find a Permission in the system by its email address
      operationId: getPermissionByTokenvalue
      parameters:
        - in: path
          name: tokenValue
          schema:
            type: string
          required: true
          description: The name that represent the Token found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Token found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: Bad request. Token name must be an string and not empty.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Token in the system
    description: Find an existing token in the system
#  ##------------------------------------------------End get by tokenValue TokenDto
#  ##------------------------------------------------Start getList TokenDto
  /auth/bm/v1/token/list:
    post:
      summary: Path used to list token that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getTokenList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Token list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/TokenDto'
#  ##------------------------------------------------End getList TokenDto
#########################################################################################################################
#  ##------------------------------------------------Start Authenticate
  /auth/bm/v1/authenticate:
    post:
      summary: Path used to authenticate a user in the system
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Userbm authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to authenticate a user for this system
    description: Authenticate a User in the system
#  ##------------------------------------------------End Authenticate
#########################################################################################################################
#  ##------------------------------------------------Start Create UnitDto
  /unit/bm/v1/unit/create:
    post:
      summary: Path used to save a new unit used to sell productformated in the system
      operationId: saveUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDto'
      responses:
        '200':
          description: Unit saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a unit for this system
    description: Add or save a new Unit in the system
#  ##------------------------------------------------End Create UnitDto
#  ##------------------------------------------------Start delete UnitDto
  /unit/bm/v1/unit/delete/{id}:
    delete:
      summary: Path used to delete a unit in the system with its id
      operationId: deleteUnitById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Unit to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Unit deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Unit ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a unit for this system
    description: Delete an existing unit in the system
#  ##------------------------------------------------End delete UnitDto
#  ##------------------------------------------------Start get by id UnitDto
  /unit/bm/v1/unit/getby/{id}:
    get:
      summary: Find a Unit in the system by its id
      operationId: getUnitById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Unit found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Unit found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
        '400':
          description: Bad request. Unit ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a unit for this system
    description: Find an existing unit in the system
#  ##------------------------------------------------End get by id UnitDto
#  ##------------------------------------------------Start getList UnitDto
  /unit/bm/v1/unit/list:
    post:
      summary: Path used to list unit that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getUnitList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Unit list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/UnitDto'
#  ##------------------------------------------------End getList UnitDto
#  ##------------------------------------------------Start getPage UnitDto
  /unit/bm/v1/unit/page:
    post:
      summary: Path used to list unit page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getUnitPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Unit page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofUnitDto'
#  ##------------------------------------------------End getPage UnitDto
#  ##------------------------------------------------Start update UnitDto
  /unit/bm/v1/unit/update:
    put:
      summary: Path used to update or modify an existing unit in the system
      operationId: updateUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDto'
      responses:
        '200':
          description: Unit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a unit for this system
    description: Update an existing unit in the system
#  ##------------------------------------------------End update UnitDto
#########################################################################################################################
#  ##------------------------------------------------Start Create UnitconversionDto
  /unit/bm/v1/conversion/create:
    post:
      summary: Path used to save a new unitconversion used to sell productformated in the system
      operationId: saveUnitconversion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitconversionDto'
      responses:
        '200':
          description: Unitconversion saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitconversionDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a unit conversion for this system
    description: Add or save a new Unit conversion in the system
#  ##------------------------------------------------End Create UnitconversionDto
#  ##------------------------------------------------Start delete UnitconversionDto
  /unit/bm/v1/conversion/delete/{id}:
    delete:
      summary: Path used to delete a unit conversion in the system with its id
      operationId: deleteUnitconversionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Unitconversion to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Unitconversion deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Unitconversion ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a unitconversion for this system
    description: Delete an existing unitconversion in the system
#  ##------------------------------------------------End delete UnitconversionDto
#  ##------------------------------------------------Start get by id UnitconversionDto
  /unit/bm/v1/conversion/getby/{id}:
    get:
      summary: Find a Unitconversion in the system by its id
      operationId: getUnitconversionById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Unitconversion found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Unitconversion found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitconversionDto'
        '400':
          description: Bad request. Unitconversion ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a unitconversion for this system
    description: Find an existing unitconversion in the system
#  ##------------------------------------------------End get by id UnitconversionDto
#  ##------------------------------------------------Start getList UnitconversionDto
  /unit/bm/v1/conversion/list:
    post:
      summary: Path used to list unitconversion that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getUnitconversionList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Unitconversion list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/UnitconversionDto'
#  ##------------------------------------------------End getList UnitconversionDto
#  ##------------------------------------------------Start getPage UnitconversionDto
  /unit/bm/v1/conversion/page:
    post:
      summary: Path used to list unitconversion page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getUnitconversionPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Unitconversion page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofUnitconversionDto'
#  ##------------------------------------------------End getPage UnitconversionDto
#  ##------------------------------------------------Start update UnitconversionDto
  /unit/bm/v1/conversion/update:
    put:
      summary: Path used to update or modify an existing unitconversion in the system
      operationId: updateUnitconversion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitconversionDto'
      responses:
        '200':
          description: Unitconversion updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitconversionDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a unitconversion for this system
    description: Update an existing unitconversion in the system
#  ##------------------------------------------------End update UnitconversionDto
#########################################################################################################################
#  ##------------------------------------------------Start Create CategoryDto
  /category/bm/v1/create:
    post:
      summary: Path used to save a new category of product in the system
      operationId: saveCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '200':
          description: Category saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a category for this system
    description: Add or save a new Category in the system
#  ##------------------------------------------------End Create CategoryDto
#  ##------------------------------------------------Start delete CategoryDto
  /category/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a category in the system with its id
      operationId: deleteCategoryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Category to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Category ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a category for this system
    description: Delete an existing category in the system
#  ##------------------------------------------------End delete CategoryDto
#  ##------------------------------------------------Start get by id CategoryDto
  /category/bm/v1/getby/{id}:
    get:
      summary: Find a Category in the system by its id
      operationId: getCategoryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Category found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Category found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Bad request. Category ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a category for this system
    description: Find an existing category in the system
#  ##------------------------------------------------End get by id CategoryDto
#  ##------------------------------------------------Start getList CategoryDto
  /category/bm/v1/list:
    post:
      summary: Path used to list category that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getCategoryList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Category list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/CategoryDto'
#  ##------------------------------------------------End getList CategoryDto
#  ##------------------------------------------------Start getPage CategoryDto
  /category/bm/v1/page:
    post:
      summary: Path used to list category page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getCategoryPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Category page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofCategoryDto'
#  ##------------------------------------------------End getPage CategoryDto
#  ##------------------------------------------------Start update CategoryDto
  /category/bm/v1/update:
    put:
      summary: Path used to update or modify an existing category in the system
      operationId: updateCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a category for this system
    description: Update an existing category in the system
#  ##------------------------------------------------End update CategoryDto
#########################################################################################################################
#  ##------------------------------------------------Start Create FormatDto
  /format/bm/v1/create:
    post:
      summary: Path used to save a new format of product in the system
      operationId: saveFormat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatDto'
      responses:
        '200':
          description: Format saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a format for this system
    description: Add or save a new Format in the system
#  ##------------------------------------------------End Create FormatDto
#  ##------------------------------------------------Start delete FormatDto
  /format/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a format in the system with its id
      operationId: deleteFormatById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Format to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Format deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Format ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a format for this system
    description: Delete an existing format in the system
#  ##------------------------------------------------End delete FormatDto
#  ##------------------------------------------------Start get by id FormatDto
  /format/bm/v1/getby/{id}:
    get:
      summary: Find a Format in the system by its id
      operationId: getFormatById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Format found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Format found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatDto'
        '400':
          description: Bad request. Format ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a format for this system
    description: Find an existing format in the system
#  ##------------------------------------------------End get by id FormatDto
#  ##------------------------------------------------Start getList FormatDto
  /format/bm/v1/list:
    post:
      summary: Path used to list format that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getFormatList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Format list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/FormatDto'
#  ##------------------------------------------------End getList FormatDto
#  ##------------------------------------------------Start getPage FormatDto
  /format/bm/v1/page:
    post:
      summary: Path used to list format page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getFormatPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Format page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofFormatDto'
#  ##------------------------------------------------End getPage FormatDto
#  ##------------------------------------------------Start update FormatDto
  /format/bm/v1/update:
    put:
      summary: Path used to update or modify an existing format in the system
      operationId: updateFormat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatDto'
      responses:
        '200':
          description: Format updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a format for this system
    description: Update an existing format in the system
#  ##------------------------------------------------End update FormatDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ProductDto
  /product/bm/v1/create:
    post:
      summary: Path used to save a new product of product in the system
      operationId: saveProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '200':
          description: Product saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a product for this system
    description: Add or save a new Product in the system
#  ##------------------------------------------------End Create ProductDto
#  ##------------------------------------------------Start delete ProductDto
  /product/bm/v1/delete:
    delete:
      summary: Path used to delete a product in the system with its id
      operationId: deleteProductById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Product to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Category ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a product for this system
    description: Delete an existing product in the system
#  ##------------------------------------------------End delete ProductDto
#  ##------------------------------------------------Start get by id ProductDto
  /product/bm/v1/getby/{id}:
    get:
      summary: Find a Product in the system by its id
      operationId: getProductById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Product found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Product found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Bad request. Product ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a product for this system
    description: Find an existing product in the system
#  ##------------------------------------------------End get by id ProductDto
#  ##------------------------------------------------Start getList ProductDto
  /product/bm/v1/list:
    post:
      summary: Path used to list product that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getProductList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Product list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ProductDto'
#  ##------------------------------------------------End getList ProductDto
#  ##------------------------------------------------Start getPage ProductDto
  /product/bm/v1/page:
    post:
      summary: Path used to list product page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getProductPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Product page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofProductDto'
#  ##------------------------------------------------End getPage ProductDto
#  ##------------------------------------------------Start update ProductDto
  /product/bm/v1/update:
    put:
      summary: Path used to update or modify an existing product in the system
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a product for this system
    description: Update an existing product in the system
#  ##------------------------------------------------End update ProductDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ProductformatedDto
  /pf/bm/v1/create:
    post:
      summary: Path used to save a new product formated in the system
      operationId: saveProductformated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductformatedDto'
      responses:
        '200':
          description: Product formated saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductformatedDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a productformated for this system
    description: Add or save a new Productformated in the system
#  ##------------------------------------------------End Create ProductformatedDto
#  ##------------------------------------------------Start delete ProductformatedDto
  /pf/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a product formated in the system with its id
      operationId: deleteProductformatedById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Productformated to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Productformated deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Productformated ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a productformated for this system
    description: Delete an existing productformated in the system
#  ##------------------------------------------------End delete ProductformatedDto
#  ##------------------------------------------------Start get by id ProductformatedDto
  /pf/bm/v1/getby/{id}:
    get:
      summary: Find a Productformated in the system by its id
      operationId: getProductformatedById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Productformated found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Productformated found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductformatedDto'
        '400':
          description: Bad request. Productformated ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a productformated for this system
    description: Find an existing productformated in the system
#  ##------------------------------------------------End get by id ProductformatedDto
#  ##------------------------------------------------Start getList ProductformatedDto
  /pf/bm/v1/list:
    post:
      summary: Path used to list productformated that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getProductformatedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Productformated list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ProductformatedDto'
#  ##------------------------------------------------End getList ProductformatedDto
#  ##------------------------------------------------Start getPage ProductformatedDto
  /pf/bm/v1/page:
    post:
      summary: Path used to list productformated page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getProductformatedPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Productformated page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofProductformatedDto'
#  ##------------------------------------------------End getPage ProductformatedDto
#  ##------------------------------------------------Start update ProductformatedDto
  /pf/bm/v1/update:
    put:
      summary: Path used to update or modify an existing product formated in the system
      operationId: updateProductformated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductformatedDto'
      responses:
        '200':
          description: Productformated updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductformatedDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a productformated for this system
    description: Update an existing productformated in the system
#  ##------------------------------------------------End update ProductformatedDto
#########################################################################################################################
#  ##------------------------------------------------Start Create BasepriceDto
  /bp/bm/v1/create:
    post:
      summary: Path used to save a new Baseprice of an article in the system
      operationId: saveBaseprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasepriceDto'
      responses:
        '200':
          description: Baseprice of an article saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasepriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a Baseprice of an article for this system
    description: Add or save a new Baseprice of an Article in the system
#  ##------------------------------------------------End Create BasepriceDto
#  ##------------------------------------------------Start delete BasepriceDto
  /bp/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a baseprice in the system with its id
      operationId: deleteBasepriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Baseprice to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Baseprice deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Baseprice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a baseprice for this system
    description: Delete an existing baseprice in the system
#  ##------------------------------------------------End delete BasepriceDto
#  ##------------------------------------------------Start get by id BasepriceDto
  /bp/bm/v1/getby/{id}:
    get:
      summary: Find a Baseprice in the system by its id
      operationId: getBasepriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Baseprice found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Baseprice found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasepriceDto'
        '400':
          description: Bad request. Baseprice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Baseprice for this system
    description: Find an existing baseprice in the system
#  ##------------------------------------------------End get by id BasepriceDto
#  ##------------------------------------------------Start update BasepriceDto
  /bp/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Baseprice in the system
      operationId: updateBaseprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasepriceDto'
      responses:
        '200':
          description: Baseprice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasepriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a baseprice for this system
    description: Update an existing baseprice in the system
#  ##------------------------------------------------End update BasepriceDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ArticleDto
  /article/bm/v1/create:
    post:
      summary: Path used to save a new Article of product in the system
      operationId: saveArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleDto'
      responses:
        '200':
          description: Article saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an article for this system
    description: Add or save a new Article in the system
#  ##------------------------------------------------End Create ArticleDto
#  ##------------------------------------------------Start delete ArticleDto
  /article/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete an article in the system with its id
      operationId: deleteArticleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Article to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Article deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Article ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an article for this system
    description: Delete an existing article in the system
#  ##------------------------------------------------End delete ArticleDto
#  ##------------------------------------------------Start get by id ArticleDto
  /article/bm/v1/getby/{id}:
    get:
      summary: Find an Article in the system by its id
      operationId: getArticleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Article found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Article found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
        '400':
          description: Bad request. Article ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Article for this system
    description: Find an existing article in the system
#  ##------------------------------------------------End get by id ArticleDto
#  ##------------------------------------------------Start getList ArticleDto
  /article/bm/v1/list:
    post:
      summary: Path used to list article that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getArticleList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Article list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ArticleDto'
#  ##------------------------------------------------End getList ArticleDto
#  ##------------------------------------------------Start getPage ArticleDto
  /article/bm/v1/page:
    post:
      summary: Path used to list article page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getArticlePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Article page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofArticleDto'
#  ##------------------------------------------------End getPage ArticleDto
#  ##------------------------------------------------Start update ArticleDto
  /article/bm/v1/update:
    put:
      summary: Path used to update or modify an existing article in the system
      operationId: updateArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleDto'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an article for this system
    description: Update an existing article in the system
#  ##------------------------------------------------End update ArticleDto
#########################################################################################################################
#  ##------------------------------------------------Start Create SpecialpriceDto
  /sp/bm/v1/create:
    post:
      summary: Path used to save a new Specialprice of an article link to a Baseprice in the system
      operationId: saveSpecialprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialpriceDto'
      responses:
        '200':
          description: Specialprice for a Baseprice of an article saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialpriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a Specialprice of an article for this system
    description: Add or save a new Specialprice of an Article in the system
#  ##------------------------------------------------End Create SpecialpriceDto
#  ##------------------------------------------------Start delete SpecialpriceDto
  /sp/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a specialprice in the system with its id
      operationId: deleteSpecialpriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Specialprice to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Specialprice deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Specialprice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a specialprice for this system
    description: Delete an existing specialprice in the system
#  ##------------------------------------------------End delete SpecialpriceDto
#  ##------------------------------------------------Start get by id SpecialpriceDto
  /sp/bm/v1/getby/{id}:
    get:
      summary: Find a Specialprice in the system by its id
      operationId: getSpecialpriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Specialprice found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Specialprice found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialpriceDto'
        '400':
          description: Bad request. Specialprice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Specialprice for this system
    description: Find an existing specialprice in the system
#  ##------------------------------------------------End get by id SpecialpriceDto
#  ##------------------------------------------------Start update SpecialpriceDto
  /sp/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Specialprice in the system
      operationId: updateSpecialprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialpriceDto'
      responses:
        '200':
          description: Special price updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialpriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a specialprice for this system
    description: Update an existing specialprice in the system
#  ##------------------------------------------------End update SpecialpriceDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ProviderDto
  /provider/bm/v1/create:
    post:
      summary: Path used to save a new Provider in the system
      operationId: saveProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderDto'
      responses:
        '200':
          description: Provider saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a provider for this system
    description: Add or save a new provider in the system
#  ##------------------------------------------------End Create ProviderDto
#  ##------------------------------------------------Start delete ProviderDto
  /provider/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a provider in the system with its id
      operationId: deleteProviderById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the provider to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Provider deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a provider for this system
    description: Delete an existing provider in the system
#  ##------------------------------------------------End delete ProviderDto
#  ##------------------------------------------------Start get by id ProviderDto
  /provider/bm/v1/getby/{id}:
    get:
      summary: Find a Provider in the system by its id
      operationId: getProviderById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Provider found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Provider found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderDto'
        '400':
          description: Bad request. Provider ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a provider for this system
    description: Find an existing provider in the system
#  ##------------------------------------------------End get by id ProviderDto
#  ##------------------------------------------------Start getList ProviderDto
  /provider/bm/v1/list:
    post:
      summary: Path used to list provider that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getProviderList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Provider list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ProviderDto'
#  ##------------------------------------------------End getList ProviderDto
#  ##------------------------------------------------Start getPage ProviderDto
  /provider/bm/v1/page:
    post:
      summary: Path used to list provider page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getProviderPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Provider page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofProviderDto'
#  ##------------------------------------------------End getPage ProviderDto
#  ##------------------------------------------------Start update ProviderDto
  /provider/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Provider in the system
      operationId: updateProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderDto'
      responses:
        '200':
          description: Provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a provider for this system
    description: Update an existing provider in the system
#  ##------------------------------------------------End update ProviderDto
#########################################################################################################################
#  ##------------------------------------------------Start Create SupplyinvoiceDto
  /supplyinvoice/bm/v1/create:
    post:
      summary: Path used to save a new supplyinvoice in the system
      operationId: saveSupplyinvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplyinvoiceDto'
      responses:
        '200':
          description: Supply invoice saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplyinvoiceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a supplyinvoice for this system
    description: Add or save a new supplyinvoice in the system
#  ##------------------------------------------------End Create SupplyinvoiceDto
#  ##------------------------------------------------Start delete SupplyinvoiceDto
  /supplyinvoice/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a supplyinvoice in the system with its id
      operationId: deleteSupplyinvoiceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Supplyinvoice to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Supplyinvoice deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Supplyinvoice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a supplyinvoice for this system
    description: Delete an existing supplyinvoice in the system
#  ##------------------------------------------------End delete SupplyinvoiceDto
#  ##------------------------------------------------Start get by id SupplyinvoiceDto
  /supplyinvoice/bm/v1/getby/{id}:
    get:
      summary: Find a Supplyinvoice in the system by its id
      operationId: getSupplyinvoiceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Supplyinvoice found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Supplyinvoice found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplyinvoiceDto'
        '400':
          description: Bad request. Supplyinvoice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a supplyinvoice for this system
    description: Find a existing supplyinvoice in the system
#  ##------------------------------------------------End get by id SupplyinvoiceDto
#  ##------------------------------------------------Start getList SupplyinvoiceDto
  /supplyinvoice/bm/v1/list:
    post:
      summary: Path used to list supplyinvoice that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getSupplyinvoiceList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Supplyinvoice list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/SupplyinvoiceDto'
#  ##------------------------------------------------End getList SupplyinvoiceDto
#  ##------------------------------------------------Start getPage SupplyinvoiceDto
  /supplyinvoice/bm/v1/page:
    post:
      summary: Path used to list Supplyinvoice page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getSupplyinvoicePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Supplyinvoice page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofSupplyinvoiceDto'
#  ##------------------------------------------------End getPage SupplyinvoiceDto
#  ##------------------------------------------------Start update SupplyinvoiceDto
  /supplyinvoice/bm/v1/update:
    put:
      summary: Path used to update or modify a existing Supplyinvoice in the system
      operationId: updateSupplyinvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplyinvoiceDto'
      responses:
        '200':
          description: Supplyinvoice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplyinvoiceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a supplyinvoice for this system
    description: Update a existing supplyinvoice in the system
#  ##------------------------------------------------End update SupplyinvoiceDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ArrivalDto
  /arrival/bm/v1/create:
    post:
      summary: Path used to save a new Arrival in the system
      operationId: saveArrival
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrivalDto'
      responses:
        '200':
          description: Arrival saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrivalDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an arrival for this system
    description: Add or save a new Arrival in the system
#  ##------------------------------------------------End Create ArrivalDto
#  ##------------------------------------------------Start delete ArrivalDto
  /arrival/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete an arrival in the system with its id
      operationId: deleteArrivalById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Arrival to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Arrival deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Arrival ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an arrival for this system
    description: Delete an existing arrival in the system
#  ##------------------------------------------------End delete ArrivalDto
#  ##------------------------------------------------Start get by id ArrivalDto
  /arrival/bm/v1/getby/{id}:
    get:
      summary: Find an Arrival in the system by its id
      operationId: getArrivalById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Arrival found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Arrival found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrivalDto'
        '400':
          description: Bad request. Arrival ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an arrival for this system
    description: Find an existing Arrival in the system
#  ##------------------------------------------------End get by id ArrivalDto
#  ##------------------------------------------------Start getList ArrivalDto
  /arrival/bm/v1/list:
    post:
      summary: Path used to list arrival that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getArrivalList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Arrival list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ArrivalDto'
#  ##------------------------------------------------End getList ArrivalDto
#  ##------------------------------------------------Start getPage ArrivalDto
  /arrival/bm/v1/page:
    post:
      summary: Path used to list Arrival page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getArrivalPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Arrival page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofArrivalDto'
#  ##------------------------------------------------End getPage ArrivalDto
#  ##------------------------------------------------Start update ArrivalDto
  /arrival/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Arrival in the system
      operationId: updateArrival
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrivalDto'
      responses:
        '200':
          description: Arrival updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrivalDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an arrival for this system
    description: Update an existing arrival in the system
#  ##------------------------------------------------End update ArrivalDto
#########################################################################################################################
#  ##------------------------------------------------Start Create InventoryDto
  /inventory/bm/v1/create:
    post:
      summary: Path used to save a new Inventory in the system
      operationId: saveInventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryDto'
      responses:
        '200':
          description: Inventory saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an Inventory for this system
    description: Add or save a new Inventory in the system
#  ##------------------------------------------------End Create InventoryDto
#  ##------------------------------------------------Start delete InventoryDto
  /inventory/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a inventory in the system with its id
      operationId: deleteInventoryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Inventory to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Inventory deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Currency ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a inventory for this system
    description: Delete an existing inventory in the system
#  ##------------------------------------------------End delete InventoryDto
#  ##------------------------------------------------Start get by id InventoryDto
  /inventory/bm/v1/getby/{id}:
    get:
      summary: Find a Inventory in the system by its id
      operationId: getInventoryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Inventory found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Inventory found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryDto'
        '400':
          description: Bad request. Inventory ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Inventory for this system
    description: Find an existing inventory in the system
#  ##------------------------------------------------End get by id InventoryDto
#  ##------------------------------------------------Start getList InventoryDto
  /inventory/bm/v1/list:
    post:
      summary: Path used to list inventory that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getInventoryList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Inventory list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/InventoryDto'
#  ##------------------------------------------------End getList InventoryDto
#  ##------------------------------------------------Start getPage InventoryDto
  /inventory/bm/v1/page:
    post:
      summary: Path used to list Inventory page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getInventoryPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Inventory page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofInventoryDto'
#  ##------------------------------------------------End getPage InventoryDto
#  ##------------------------------------------------Start update InventoryDto
  /inventory/bm/v1/update:
    put:
      summary: Path used to update or modify an existing inventory in the system
      operationId: updateInventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryDto'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a inventory for this system
    description: Update an existing inventory in the system
#  ##------------------------------------------------End update InventoryDto
#########################################################################################################################
#  ##------------------------------------------------Start Create InventorylineDto
  /inventory/bm/v1/line/create:
    post:
      summary: Path used to save a new Inventoryline in the system
      operationId: saveInventoryline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventorylineDto'
      responses:
        '200':
          description: Inventoryline saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventorylineDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an Inventoryline for this system
    description: Add or save a new Inventoryline in the system
#  ##------------------------------------------------End Create InventorylineDto
#  ##------------------------------------------------Start delete InventorylineDto
  /inventory/bm/v1/line/delete/{id}:
    delete:
      summary: Path used to delete a inventoryline in the system with its id
      operationId: deleteInventorylineById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Inventoryline to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Inventoryline deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Currency ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a inventoryline for this system
    description: Delete an existing inventoryline in the system
#  ##------------------------------------------------End delete InventorylineDto
#  ##------------------------------------------------Start get by id InventorylineDto
  /inventory/bm/v1/line/getby/{id}:
    get:
      summary: Find a Inventoryline in the system by its id
      operationId: getInventorylineById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Inventoryline found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Inventoryline found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventorylineDto'
        '400':
          description: Bad request. Inventory ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a Inventoryline for this system
    description: Find an existing inventoryline in the system
#  ##------------------------------------------------End get by id InventorylineDto
#  ##------------------------------------------------Start getList InventorylineDto
  /inventory/bm/v1/line/list:
    post:
      summary: Path used to list inventoryline that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getInventorylineList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Inventoryline list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/InventorylineDto'
#  ##------------------------------------------------End getList InventorylineDto
#  ##------------------------------------------------Start getPage InventorylineDto
  /inventory/bm/v1/line/page:
    post:
      summary: Path used to list Inventoryline page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getInventorylinePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Inventoryline page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofInventorylineDto'
#  ##------------------------------------------------End getPage InventorylineDto
#  ##------------------------------------------------Start update InventorylineDto
  /inventory/bm/v1/line/update:
    put:
      summary: Path used to update or modify an existing inventoryline in the system
      operationId: updateInventoryline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventorylineDto'
      responses:
        '200':
          description: Inventoryline updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventorylineDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a inventoryline for this system
    description: Update an existing inventoryline in the system
#  ##------------------------------------------------End update InventorylineDto
#########################################################################################################################
#  ##------------------------------------------------Start Create PackagingDto
  /packaging/bm/v1/create:
    post:
      summary: Path used to save a new Packaging in the system
      operationId: savePackaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagingDto'
      responses:
        '200':
          description: Packaging saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a packaging for this system
    description: Add or save a new Packaging in the system
#  ##------------------------------------------------End Create PackagingDto
#  ##------------------------------------------------Start delete PackagingDto
  /packaging/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a packaging in the system with its id
      operationId: deletePackagingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Packaging to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Packaging deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Packaging ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a packaging for this system
    description: Delete an existing packaging in the system
#  ##------------------------------------------------End delete PackagingDto
#  ##------------------------------------------------Start get by id PackagingDto
  /packaging/bm/v1/getby/{id}:
    get:
      summary: Find a Packaging in the system by its id
      operationId: getPackagingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Packaging found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Packaging found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingDto'
        '400':
          description: Bad request. Packaging ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a packaging for this system
    description: Find an existing packaging in the system
#  ##------------------------------------------------End get by id PackagingDto
#  ##------------------------------------------------Start getList PackagingDto
  /packaging/bm/v1/list:
    post:
      summary: Path used to list packaging that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getPackagingList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Packaging list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/PackagingDto'
#  ##------------------------------------------------End getList PackagingDto
#  ##------------------------------------------------Start getPage PackagingDto
  /packaging/bm/v1/page:
    post:
      summary: Path used to list packaging page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getPackagingPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Packaging page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofPackagingDto'
#  ##------------------------------------------------End getPage PackagingDto
#  ##------------------------------------------------Start update PackagingDto
  /packaging/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Packaging in the system
      operationId: updatePackaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagingDto'
      responses:
        '200':
          description: Packaging updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a packaging for this system
    description: Update an existing packaging in the system
#  ##------------------------------------------------End update PackagingDto
#########################################################################################################################
#  ##------------------------------------------------Start Create LoadingDto
  /loading/bm/v1/create:
    post:
      summary: Path used to save a new Loading in the system
      operationId: saveLoading
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadingDto'
      responses:
        '200':
          description: Loading saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a loading for this system
    description: Add or save a new Loading in the system
#  ##------------------------------------------------End Create LoadingDto
#  ##------------------------------------------------Start delete LoadingDto
  /loading/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a loading in the system with its id
      operationId: deleteLoadingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loading to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loading deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a loading for this system
    description: Delete an existing loading in the system
#  ##------------------------------------------------End delete LoadingDto
#  ##------------------------------------------------Start get by id LoadingDto
  /loading/bm/v1/getby/{id}:
    get:
      summary: Find a Loading in the system by its id
      operationId: getLoadingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loading found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loading found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingDto'
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a loading for this system
    description: Find an existing loading in the system
#  ##------------------------------------------------End get by id LoadingDto
#  ##------------------------------------------------Start getList LoadingDto
  /loading/bm/v1/list:
    post:
      summary: Path used to list loading that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getLoadingList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Loading list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/LoadingDto'
#  ##------------------------------------------------End getList LoadingDto
#  ##------------------------------------------------Start getPage LoadingDto
  /loading/bm/v1/page:
    post:
      summary: Path used to list loading page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getLoadingPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Loading page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofLoadingDto'
#  ##------------------------------------------------End getPage LoadingDto
#  ##------------------------------------------------Start update LoadingDto
  /loading/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Loading in the system
      operationId: updateLoading
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadingDto'
      responses:
        '200':
          description: Loading updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a loading for this system
    description: Update an existing loading in the system
#  ##------------------------------------------------End update LoadingDto
#  ##------------------------------------------------Start open LoadingDto
  /loading/bm/v1/open:
    get:
      summary: Open a Loading in the system by its id
      operationId: openLoadingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loading to open. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loading opened successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingDto'
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a loading for this system
    description: Find an existing loading in the system
#  ##------------------------------------------------End open LoadingDto
#  ##------------------------------------------------Start close LoadingDto
  /loading/bm/v1/close:
    get:
      summary: Close a Loading in the system by its id
      operationId: closeLoadingById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loading to close. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loading closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingDto'
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a loading for this system
    description: Find an existing loading in the system
#  ##------------------------------------------------End close LoadingDto
#########################################################################################################################
#  ##------------------------------------------------Start Create LoadingdetailsDto
  /loading/bm/v1/details/create:
    post:
      summary: Path used to save a new Loadingdetails in the system
      operationId: saveLoadingdetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadingdetailsDto'
      responses:
        '200':
          description: Loading details saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingdetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a loading details for this system
    description: Add or save a new Loadingdetails in the system
#  ##------------------------------------------------End Create LoadingdetailsDto
#  ##------------------------------------------------Start delete LoadingdetailsDto
  /loading/bm/v1/details/delete/{id}:
    delete:
      summary: Path used to delete a loadingdetails in the system with its id
      operationId: deleteLoadingdetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loadingdetails to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loadingdetails deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a loadingdetails for this system
    description: Delete an existing loadingdetails in the system
#  ##------------------------------------------------End delete LoadingdetailsDto
#  ##------------------------------------------------Start get by id LoadingdetailsDto
  /loading/bm/v1/details/getby/{id}:
    get:
      summary: Find a Loadingdetails in the system by its id
      operationId: getLoadingdetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Loadingdetails found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Loadingdetails found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingdetailsDto'
        '400':
          description: Bad request. Loadingdetails ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a loadingdetails for this system
    description: Find an existing loadingdetails in the system
#  ##------------------------------------------------End get by id LoadingdetailsDto
#  ##------------------------------------------------Start getList LoadingdetailsDto
  /loading/bm/v1/details/list:
    post:
      summary: Path used to list loadingdetails that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getLoadingdetailsList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Loadingdetails list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/LoadingdetailsDto'
#  ##------------------------------------------------End getList LoadingdetailsDto
#  ##------------------------------------------------Start getPage LoadingdetailsDto
  /loading/bm/v1/details/page:
    post:
      summary: Path used to list loadingdetails page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getLoadingdetailsPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Loadingdetails page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofLoadingdetailsDto'
#  ##------------------------------------------------End getPage LoadingdetailsDto
#  ##------------------------------------------------Start update LoadingdetailsDto
  /loading/bm/v1/details/update:
    put:
      summary: Path used to update or modify an existing Loadingdetails in the system
      operationId: updateLoadingdetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadingdetailsDto'
      responses:
        '200':
          description: Loadingdetails updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadingdetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a loading details for this system
    description: Update an existing loading details in the system
#  ##------------------------------------------------End update LoadingdetailsDto
#########################################################################################################################
#  ##------------------------------------------------Start Create PackagingdetailsDto
  /loading/bm/v1/packaging/details/create:
    post:
      summary: Path used to save a new Packagingdetails in the system
      operationId: savePackagingdetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagingdetailsDto'
      responses:
        '200':
          description: Packaging details saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingdetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a packaging details for this system
    description: Add or save a new Packagingdetails in the system
#  ##------------------------------------------------End Create PackagingdetailsDto
#  ##------------------------------------------------Start delete PackagingdetailsDto
  /loading/bm/v1/packaging/details/delete/{id}:
    delete:
      summary: Path used to delete a packagingdetails in the system with its id
      operationId: deletePackagingdetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Packagingdetails to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Packagingdetails deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a packagingdetails for this system
    description: Delete an existing packagingdetails in the system
#  ##------------------------------------------------End delete PackagingdetailsDto
#  ##------------------------------------------------Start get by id PackagingdetailsDto
  /loading/bm/v1/packaging/details/getby/{id}:
    get:
      summary: Find a Packagingdetails in the system by its id
      operationId: getPackagingdetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Packagingdetails found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Packagingdetails found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingdetailsDto'
        '400':
          description: Bad request. Packagingdetails ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a packagingdetails for this system
    description: Find an existing packagingdetails in the system
#  ##------------------------------------------------End get by id PackagingdetailsDto
#  ##------------------------------------------------Start getList PackagingdetailsDto
  /loading/bm/v1/packaging/details/list:
    post:
      summary: Path used to list packagingdetails that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getPackagingdetailsList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Packagingdetails list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/PackagingdetailsDto'
#  ##------------------------------------------------End getList PackagingdetailsDto
#  ##------------------------------------------------Start getPage PackagingdetailsDto
  /loading/bm/v1/packaging/details/page:
    post:
      summary: Path used to list packagingdetails page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getPackagingdetailsPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Packagingdetails page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofPackagingdetailsDto'
#  ##------------------------------------------------End getPage PackagingdetailsDto
#  ##------------------------------------------------Start update PackagingdetailsDto
  /loading/bm/v1/packaging/details/update:
    put:
      summary: Path used to update or modify an existing Packagingdetails in the system
      operationId: updatePackagingdetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagingdetailsDto'
      responses:
        '200':
          description: Packagingdetails updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingdetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a packaging details for this system
    description: Update an existing packaging details in the system
#  ##------------------------------------------------End update PackagingdetailsDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ClientDto
  /client/bm/v1/create:
    post:
      summary: Path used to save a new Client in the system
      operationId: saveClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDto'
      responses:
        '200':
          description: Client saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a client for this system
    description: Add or save a new client in the system
#  ##------------------------------------------------End Create ClientDto
#  ##------------------------------------------------Start delete ClientDto
  /client/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a client in the system with its id
      operationId: deleteClientById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the client to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a client for this system
    description: Delete an existing client in the system
#  ##------------------------------------------------End delete ClientDto
#  ##------------------------------------------------Start get by id ClientDto
  /client/bm/v1/getby/{id}:
    get:
      summary: Find a Client in the system by its id
      operationId: getClientById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Client found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Client found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Bad request. Client ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a client for this system
    description: Find an existing client in the system
#  ##------------------------------------------------End get by id ClientDto
#  ##------------------------------------------------Start getList ClientDto
  /client/bm/v1/list:
    post:
      summary: Path used to list client that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getClientList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Client list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ClientDto'
#  ##------------------------------------------------End getList ClientDto
#  ##------------------------------------------------Start getPage ClientDto
  /client/bm/v1/page:
    post:
      summary: Path used to list client page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getClientPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Client page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofClientDto'
#  ##------------------------------------------------End getPage ClientDto
#  ##------------------------------------------------Start update ClientDto
  /client/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Client in the system
      operationId: updateClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDto'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a client for this system
    description: Update an existing client in the system
#  ##------------------------------------------------End update ClientDto
#########################################################################################################################
#  ##------------------------------------------------Start Create ClientSpecialpriceDto
  /clientspecialprice/bm/v1/create:
    post:
      summary: Path used to save a new ClientSpecialprice in the system
      operationId: saveClientSpecialprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSpecialpriceDto'
      responses:
        '200':
          description: ClientSpecialprice saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSpecialpriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a clientspecialprice for this system
    description: Add or save a new clientspecialprice in the system
#  ##------------------------------------------------End Create ClientSpecialpriceDto
#  ##------------------------------------------------Start delete ClientSpecialpriceDto
  /clientspecialprice/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a clientspecialprice in the system with its id
      operationId: deleteClientSpecialpriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the clientspecialprice to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: ClientSpecialprice deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Loading ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a clientspecialprice for this system
    description: Delete an existing clientspecialprice in the system
#  ##------------------------------------------------End delete ClientSpecialpriceDto
#  ##------------------------------------------------Start get by id ClientSpecialpriceDto
  /clientspecialprice/bm/v1/getby/{id}:
    get:
      summary: Find a ClientSpecialprice in the system by its id
      operationId: getClientSpecialpriceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the ClientSpecialprice found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: ClientSpecialprice found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSpecialpriceDto'
        '400':
          description: Bad request. ClientSpecialprice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a clientspecialprice for this system
    description: Find an existing clientspecialprice in the system
#  ##------------------------------------------------End get by id ClientSpecialpriceDto
#  ##------------------------------------------------Start getList ClientSpecialpriceDto
  /clientspecialprice/bm/v1/list:
    post:
      summary: Path used to list clientspecialprice that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getClientSpecialpriceList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: ClientSpecialprice list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ClientSpecialpriceDto'
#  ##------------------------------------------------End getList ClientSpecialpriceDto
#  ##------------------------------------------------Start getPage ClientSpecialpriceDto
  /clientspecialprice/bm/v1/page:
    post:
      summary: Path used to list clientspecialprice page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getClientSpecialpricePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: ClientSpecialprice page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofClientSpecialpriceDto'
#  ##------------------------------------------------End getPage ClientSpecialpriceDto
#  ##------------------------------------------------Start update ClientSpecialpriceDto
  /clientspecialprice/bm/v1/update:
    put:
      summary: Path used to update or modify an existing ClientSpecialprice in the system
      operationId: updateClientSpecialprice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSpecialpriceDto'
      responses:
        '200':
          description: ClientSpecialprice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSpecialpriceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a clientspecialprice for this system
    description: Update an existing clientspecialprice in the system
#  ##------------------------------------------------End update ClientSpecialpriceDto
#########################################################################################################################
#  ##------------------------------------------------Start Create SaleinvoiceDto
  /saleinvoice/bm/v1/create:
    post:
      summary: Path used to save a new Saleinvoice in the system
      operationId: saveSaleinvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleinvoiceDto'
      responses:
        '200':
          description: Saleinvoice saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleinvoiceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a saleinvoice for this system
    description: Add or save a new saleinvoice in the system
#  ##------------------------------------------------End Create SaleinvoiceDto
#  ##------------------------------------------------Start delete SaleinvoiceDto
  /saleinvoice/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a Saleinvoice in the system with its id
      operationId: deleteSaleinvoiceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Saleinvoice to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Saleinvoice deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Saleinvoice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a saleinvoice for this system
    description: Delete an existing saleinvoice in the system
#  ##------------------------------------------------End delete SaleinvoiceDto
#  ##------------------------------------------------Start get by id SaleinvoiceDto
  /saleinvoice/bm/v1/getby/{id}:
    get:
      summary: Find a Saleinvoice in the system by its id
      operationId: getSaleinvoiceById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Saleinvoice found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Saleinvoice found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleinvoiceDto'
        '400':
          description: Bad request. Saleinvoice ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a saleinvoice for this system
    description: Find an existing Saleinvoice in the system
#  ##------------------------------------------------End get by id SaleinvoiceDto
#  ##------------------------------------------------Start getList SaleinvoiceDto
  /saleinvoice/bm/v1/list:
    post:
      summary: Path used to list saleinvoice that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getSaleinvoiceList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Saleinvoice list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/SaleinvoiceDto'
#  ##------------------------------------------------End getList SaleinvoiceDto
#  ##------------------------------------------------Start getPage SaleinvoiceDto
  /saleinvoice/bm/v1/page:
    post:
      summary: Path used to list Saleinvoice page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getSaleinvoicePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Saleinvoice page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofSaleinvoiceDto'
#  ##------------------------------------------------End getPage SaleinvoiceDto
#  ##------------------------------------------------Start update SaleinvoiceDto
  /saleinvoice/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Saleinvoice in the system
      operationId: updateSaleinvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleinvoiceDto'
      responses:
        '200':
          description: Saleinvoice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleinvoiceDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a saleinvoice for this system
    description: Update an existing saleinvoice in the system
#  ##------------------------------------------------End update SaleinvoiceDto
#########################################################################################################################
#  ##------------------------------------------------Start Create DeliveryDto
  /delivery/bm/v1/create:
    post:
      summary: Path used to save a new Delivery in the system
      operationId: saveDelivery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryDto'
      responses:
        '200':
          description: Delivery saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a delivery for this system
    description: Add or save a new delivery in the system
#  ##------------------------------------------------End Create DeliveryDto
#  ##------------------------------------------------Start delete DeliveryDto
  /delivery/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a Delivery in the system with its id
      operationId: deleteDeliveryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Delivery to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Delivery deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Delivery ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a delivery for this system
    description: Delete an existing delivery in the system
#  ##------------------------------------------------End delete DeliveryDto
#  ##------------------------------------------------Start get by id DeliveryDto
  /delivery/bm/v1/getby/{id}:
    get:
      summary: Find a Delivery in the system by its id
      operationId: getDeliveryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Delivery found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Delivery found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryDto'
        '400':
          description: Bad request. Delivery ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a delivery for this system
    description: Find an existing delivery in the system
#  ##------------------------------------------------End get by id DeliveryDto
#  ##------------------------------------------------Start getList DeliveryDto
  /delivery/bm/v1/list:
    post:
      summary: Path used to list delivery that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getDeliveryList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Delivery list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/DeliveryDto'
#  ##------------------------------------------------End getList DeliveryDto
#  ##------------------------------------------------Start getPage DeliveryDto
  /delivery/bm/v1/page:
    post:
      summary: Path used to list delivery page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getDeliveryPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Delivery page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofDeliveryDto'
#  ##------------------------------------------------End getPage DeliveryDto
#  ##------------------------------------------------Start update DeliveryDto
  /delivery/bm/v1/update:
    put:
      summary: Path used to update or modify an existing delivery in the system
      operationId: updateDelivery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryDto'
      responses:
        '200':
          description: Delivery updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a delivery for this system
    description: Update an existing delivery in the system
#  ##------------------------------------------------End update DeliveryDto
#########################################################################################################################
#  ##------------------------------------------------Start Create DeliverydetailsDto
  /delivery/bm/v1/details/create:
    post:
      summary: Path used to save a new Deliverydetails in the system
      operationId: saveDeliverydetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverydetailsDto'
      responses:
        '200':
          description: Delivery details saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverydetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a delivery details for this system
    description: Add or save a new delivery details in the system
#  ##------------------------------------------------End Create DeliverydetailsDto
#  ##------------------------------------------------Start delete DeliverydetailsDto
  /delivery/bm/v1/details/delete/{id}:
    delete:
      summary: Path used to delete a Deliverydetails in the system with its id
      operationId: deleteDeliverydetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Deliverydetails to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Deliverydetails deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Deliverydetails ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a deliverydetails for this system
    description: Delete an existing deliverydetails in the system
#  ##------------------------------------------------End delete DeliverydetailsDto
#  ##------------------------------------------------Start get by id DeliverydetailsDto
  /delivery/bm/v1/details/getby/{id}:
    get:
      summary: Find a Deliverydetails in the system by its id
      operationId: getDeliverydetailsById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Deliverydetails found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Deliverydetails found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverydetailsDto'
        '400':
          description: Bad request. Deliverydetails ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a deliverydetails for this system
    description: Find an existing deliverydetails in the system
#  ##------------------------------------------------End get by id DeliverydetailsDto
#  ##------------------------------------------------Start getList DeliverydetailsDto
  /delivery/bm/v1/details/list:
    post:
      summary: Path used to list delivery details that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getDeliverydetailsList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Delivery details list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/DeliverydetailsDto'
#  ##------------------------------------------------End getList DeliverydetailsDto
#  ##------------------------------------------------Start getPage DeliverydetailsDto
  /delivery/bm/v1/details/page:
    post:
      summary: Path used to list deliverydetails page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getDeliverydetailsPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Deliverydetails page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofDeliverydetailsDto'
#  ##------------------------------------------------End getPage DeliverydetailsDto
#  ##------------------------------------------------Start update DeliverydetailsDto
  /delivery/bm/v1/details/update:
    put:
      summary: Path used to update or modify an existing deliverydetails in the system
      operationId: updateDeliverydetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverydetailsDto'
      responses:
        '200':
          description: Deliverydetails updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverydetailsDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a deliverydetails for this system
    description: Update an existing deliverydetails in the system
#  ##------------------------------------------------End update DeliverydetailsDto
#########################################################################################################################
#  ##------------------------------------------------Start Create CommandDto
  /command/bm/v1/create:
    post:
      summary: Path used to save a new Command in the system
      operationId: saveCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
      responses:
        '200':
          description: Command saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a command for this system
    description: Add or save a new command in the system
#  ##------------------------------------------------End Create CommandDto
#  ##------------------------------------------------Start delete CommandDto
  /command/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a command in the system with its id
      operationId: deleteCommandById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Command to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Command deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Arrival ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a command for this system
    description: Delete an existing command in the system
#  ##------------------------------------------------End delete CommandDto
#  ##------------------------------------------------Start get by id CommandDto
  /command/bm/v1/getby/{id}:
    get:
      summary: Find a Command in the system by its id
      operationId: getCommandById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Command found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Command found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
        '400':
          description: Bad request. Command ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a command for this system
    description: Find an existing Command in the system
#  ##------------------------------------------------End get by id CommandDto
#  ##------------------------------------------------Start getList CommandDto
  /command/bm/v1/list:
    post:
      summary: Path used to list command that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getCommandList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Command list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/CommandDto'
#  ##------------------------------------------------End getList CommandDto
#  ##------------------------------------------------Start getPage CommandDto
  /command/bm/v1/page:
    post:
      summary: Path used to list Command page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getCommandPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Command page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofCommandDto'
#  ##------------------------------------------------End getPage CommandDto
#  ##------------------------------------------------Start update CommandDto
  /command/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Command in the system
      operationId: updateCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
      responses:
        '200':
          description: Command updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a command for this system
    description: Update an existing command in the system
#  ##------------------------------------------------End update CommandDto
#########################################################################################################################
#  ##------------------------------------------------Start Create SaleDto
  /sale/bm/v1/create:
    post:
      summary: Path used to save a new Sale in the system
      operationId: saveSale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDto'
      responses:
        '200':
          description: Sale saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a sale for this system
    description: Add or save a new sale in the system
#  ##------------------------------------------------End Create SaleDto
#  ##------------------------------------------------Start delete SaleDto
  /sale/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a Sale in the system with its id
      operationId: deleteSaleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Sale to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Sale deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Sale ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a sale for this system
    description: Delete an existing sale in the system
#  ##------------------------------------------------End delete SaleDto
#  ##------------------------------------------------Start get by id SaleDto
  /sale/bm/v1/getby/{id}:
    get:
      summary: Find a Sale in the system by its id
      operationId: getSaleById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Sale found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Sale found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDto'
        '400':
          description: Bad request. Sale ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a sale for this system
    description: Find an existing Sale in the system
#  ##------------------------------------------------End get by id SaleDto
#  ##------------------------------------------------Start getList SaleDto
  /sale/bm/v1/list:
    post:
      summary: Path used to list sale that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getSaleList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Sale list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/SaleDto'
#  ##------------------------------------------------End getList SaleDto
#  ##------------------------------------------------Start getPage SaleDto
  /sale/bm/v1/page:
    post:
      summary: Path used to list Sale page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getSalePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Sale page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofSaleDto'
#  ##------------------------------------------------End getPage SaleDto
#  ##------------------------------------------------Start update SaleDto
  /sale/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Sale in the system
      operationId: updateSale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDto'
      responses:
        '200':
          description: Sale updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a sale for this system
    description: Update an existing sale in the system
#  ##------------------------------------------------End update SaleDto
#########################################################################################################################
#  ##------------------------------------------------Start Create BackinDto
  /backin/bm/v1/create:
    post:
      summary: Path used to save a new Backin in the system
      operationId: saveBackin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackinDto'
      responses:
        '200':
          description: Backin saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackinDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a backin for this system
    description: Add or save a new backin in the system
#  ##------------------------------------------------End Create BackinDto
#  ##------------------------------------------------Start delete BackinDto
  /backin/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete a backin in the system with its id
      operationId: deleteBackinById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Backin to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Backin deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Backin ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete a backin for this system
    description: Delete an existing backin in the system
#  ##------------------------------------------------End delete BackinDto
#  ##------------------------------------------------Start get by id BackinDto
  /backin/bm/v1/getby/{id}:
    get:
      summary: Find a Backin in the system by its id
      operationId: getBackinById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Backin found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Backin found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackinDto'
        '400':
          description: Bad request. Backin ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find a backin for this system
    description: Find an existing backin in the system
#  ##------------------------------------------------End get by id BackinDto
#  ##------------------------------------------------Start getList BackinDto
  /backin/bm/v1/list:
    post:
      summary: Path used to list backin that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getBackinList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Backin list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/BackinDto'
#  ##------------------------------------------------End getList BackinDto
#  ##------------------------------------------------Start getPage BackinDto
  /backin/bm/v1/page:
   post:
     summary: Path used to list backin page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
     operationId: getBackinPage
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/FilterRequest' #FilterRequest
     responses:
       '200':
         description: Backin page found successfully
         content:
           application/json:
             schema:
               type: object
               $ref: '#/components/schemas/PageofBackinDto'
#  ##------------------------------------------------End getPage BackinDto
#  ##------------------------------------------------Start update BackinDto
  /backin/bm/v1/update:
    put:
      summary: Path used to update or modify an existing backin in the system
      operationId: updateBackin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackinDto'
      responses:
        '200':
          description: Backin updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackinDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update a backin for this system
    description: Update an existing backin in the system
#  ##------------------------------------------------End update BackinDto
#########################################################################################################################
#  ##------------------------------------------------Start Create BackindetailsDto
  /backin/bm/v1/details/create:
   post:
     summary: Path used to save a new Backindetails in the system
     operationId: saveBackindetails
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/BackindetailsDto'
     responses:
       '200':
         description: Backindetails saved successfully
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/BackindetailsDto'
       '400':
         description: Bad request. There is something wrong in the request.
       '401':
         description: Authorization information is missing or invalid.
       '403':
         description: The user who ask the ressource is Forbidden.
       '404':
         description: The expected ressource is not found.
       '500':
         description: Unexpected error at the server side.
   summary: Represents a route used to save a backindetails for this system
   description: Add or save a new backindetails in the system
#  ##------------------------------------------------End Create BackindetailsDto
#  ##------------------------------------------------Start delete BackindetailsDto
  /backin/bm/v1/details/delete/{id}:
   delete:
     summary: Path used to delete a backindetails in the system with its id
     operationId: deleteBackindetailsById
     parameters:
       - in: path
         name: id
         schema:
           type: integer
           format: int64
         required: true
         description: The id that represent the Backindetails to delete. It's compulsory if not the operation can't proceed
     responses:
       '200':
         description: Backindetails deleted successfully
         content:
           application/json:
             schema:
               type: boolean
       '400':
         description: Bad request. Backindetails ID must be an integer and larger than 0.
       '401':
         description: Authorization information is missing or invalid.
       '403':
         description: The user who ask the ressource is Forbidden.
       '404':
         description: The expected ressource is not found.
       '500':
         description: Unexpected error at the server side.
   summary: Represents a route used to delete a backindetails for this system
   description: Delete an existing backindetails in the system
#  ##------------------------------------------------End delete BackindetailsDto
#  ##------------------------------------------------Start get by id BackindetailsDto
  /backin/bm/v1/details/getby/{id}:
   get:
     summary: Find a Backindetails in the system by its id
     operationId: getBackindetailsById
     parameters:
       - in: path
         name: id
         schema:
           type: integer
           format: int64
         required: true
         description: The id that represent the Backindetails found. It's compulsory if not the operation can't proceed
     responses:
       '200':
         description: Backindetails found successfully
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/BackindetailsDto'
       '400':
         description: Bad request. Backindetails ID must be an integer and larger than 0.
       '401':
         description: Authorization information is missing or invalid.
       '403':
         description: The user who ask the ressource is Forbidden.
       '404':
         description: The expected ressource is not found.
       '500':
         description: Unexpected error at the server side.
   summary: Represents a route used to find a backindetails for this system
   description: Find an existing backindetails in the system
#  ##------------------------------------------------End get by id BackindetailsDto
#  ##------------------------------------------------Start getList BackindetailsDto
  /backin/bm/v1/details/list:
   post:
     summary: Path used to list backindetails that respect certain criteria. A criteria is an instance of a Filter object
     operationId: getBackindetailsList
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/FilterRequest' #FilterRequest
     responses:
       '200':
         description: Backindetails list found successfully
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 $ref: '#/components/schemas/BackindetailsDto'
#  ##------------------------------------------------End getList BackindetailsDto
#  ##------------------------------------------------Start getPage BackindetailsDto
  /backin/bm/v1/details/page:
   post:
     summary: Path used to list backindetails page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
     operationId: getBackindetailsPage
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/FilterRequest' #FilterRequest
     responses:
       '200':
         description: Backindetails page found successfully
         content:
           application/json:
             schema:
               type: object
               $ref: '#/components/schemas/PageofBackindetailsDto'
#  ##------------------------------------------------End getPage BackindetailsDto
#  ##------------------------------------------------Start update BackindetailsDto
  /backin/bm/v1/details/update:
   put:
     summary: Path used to update or modify an existing backindetails in the system
     operationId: updateBackindetails
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/BackindetailsDto'
     responses:
       '200':
         description: Backindetails updated successfully
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/BackindetailsDto'
       '400':
         description: Bad request. There is something wrong in the request.
       '401':
         description: Authorization information is missing or invalid.
       '403':
         description: The user who ask the ressource is Forbidden.
       '404':
         description: The expected ressource is not found.
       '500':
         description: Unexpected error at the server side.
   summary: Represents a route used to update a backindetails for this system
   description: Update an existing backindetails in the system
#  ##------------------------------------------------End update BackindetailsDto
#########################################################################################################################
#  ##------------------------------------------------Start Create AccountDto
  /account/bm/v1/create:
    post:
      summary: Path used to save a new Account in the system to manage packaging, cover and damage article
      operationId: saveAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDto'
      responses:
        '200':
          description: Account saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an account for this system
    description: Add or save a new Account in the system
#  ##------------------------------------------------End Create AccountDto
#  ##------------------------------------------------Start delete AccountDto
  /account/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete an account in the system with its id
      operationId: deleteAccountById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Account to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Account ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an account for this system
    description: Delete an existing account in the system
#  ##------------------------------------------------End delete AccountDto
#  ##------------------------------------------------Start get by id AccountDto
  /account/bm/v1/getby/{id}:
    get:
      summary: Find an Account in the system by its id
      operationId: getAccountById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Account found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Account found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad request. Account ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an account for this system
    description: Find an existing Account in the system
#  ##------------------------------------------------End get by id AccountDto
#  ##------------------------------------------------Start getList AccountDto
  /account/bm/v1/list:
    post:
      summary: Path used to list account that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getAccountList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Account list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/AccountDto'
#  ##------------------------------------------------End getList AccountDto
#  ##------------------------------------------------Start getPage AccountDto
  /account/bm/v1/page:
    post:
      summary: Path used to list Account page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getAccountPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Account page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofAccountDto'
#  ##------------------------------------------------End getPage AccountDto
#  ##------------------------------------------------Start update AccountDto
  /account/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Account in the system
      operationId: updateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDto'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an account for this system
    description: Update an existing account in the system
#  ##------------------------------------------------End update AccountDto
#########################################################################################################################
#  ##------------------------------------------------Start Create OperationDto
  /operation/bm/v1/create:
    post:
      summary: Path used to save a new Operation in the system to have history of all operations in the system
      operationId: saveOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationDto'
      responses:
        '200':
          description: Operation saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an operation for this system
    description: Add or save a new Operation in the system
#  ##------------------------------------------------End Create OperationDto
#  ##------------------------------------------------Start delete OperationDto
  /operation/bm/v1/delete/{id}:
    delete:
      summary: Path used to delete an operation in the system with its id
      operationId: deleteOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Operation to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Operation deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an operation for this system
    description: Delete an existing operation in the system
#  ##------------------------------------------------End delete OperationDto
#  ##------------------------------------------------Start get by id OperationDto
  /operation/bm/v1/getby/{id}:
    get:
      summary: Find an Operation in the system by its id
      operationId: getOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the Operation found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: Operation found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDto'
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an Operation for this system
    description: Find an existing Operation in the system
#  ##------------------------------------------------End get by id OperationDto
#  ##------------------------------------------------Start getList OperationDto
  /operation/bm/v1/list:
    post:
      summary: Path used to list operation that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getOperationList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Operation list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/OperationDto'
#  ##------------------------------------------------End getList OperationDto
#  ##------------------------------------------------Start getPage OperationDto
  /operation/bm/v1/page:
    post:
      summary: Path used to list Operation page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getOperationPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: Operation page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofOperationDto'
#  ##------------------------------------------------End getPage OperationDto
#  ##------------------------------------------------Start update OperationDto
  /operation/bm/v1/update:
    put:
      summary: Path used to update or modify an existing Operation in the system
      operationId: updateOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationDto'
      responses:
        '200':
          description: Operation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an operation for this system
    description: Update an existing operation in the system
#  ##------------------------------------------------End update OperationDto
#########################################################################################################################
#  ##------------------------------------------------Start Create AccountOperationDto
  /account/bm/v1/operation/create:
    post:
      summary: Path used to save a new AccountOperation in the system to have history of all operations in the system
      operationId: saveAccountOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountOperationDto'
      responses:
        '200':
          description: AccountOperation saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save an account operation for this system
    description: Add or save a new AccountOperation in the system
#  ##------------------------------------------------End Create AccountOperationDto
#  ##------------------------------------------------Start delete AccountOperationDto
  /account/bm/v1/operation/delete/{id}:
    delete:
      summary: Path used to delete an account operation in the system with its id
      operationId: deleteAccountOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the AccountOperation to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: AccountOperation deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an account operation for this system
    description: Delete an existing account operation in the system
#  ##------------------------------------------------End delete AccountOperationDto
#  ##------------------------------------------------Start get by id AccountOperationDto
  /account/bm/v1/operation/getby/{id}:
    get:
      summary: Find an AccountOperation in the system by its id
      operationId: getAccountOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the AccountOperation found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: AccountOperation found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOperationDto'
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an AccountOperation for this system
    description: Find an existing AccountOperation in the system
#  ##------------------------------------------------End get by id AccountOperationDto
#  ##------------------------------------------------Start getList AccountOperationDto
  /account/bm/v1/operation/list:
    post:
      summary: Path used to list accountoperation that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getAccountOperationList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: AccountOperation list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/AccountOperationDto'
#  ##------------------------------------------------End getList AccountOperationDto
#  ##------------------------------------------------Start getPage AccountOperationDto
  /account/bm/v1/operation/page:
    post:
      summary: Path used to list AccountOperation page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getAccountOperationPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: AccountOperation page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofAccountOperationDto'
#  ##------------------------------------------------End getPage AccountOperationDto
#  ##------------------------------------------------Start update AccountOperationDto
  /account/bm/v1/operation/update:
    put:
      summary: Path used to update or modify an existing AccountOperation in the system
      operationId: updateAccountOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountOperationDto'
      responses:
        '200':
          description: AccountOperation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an account operation for this system
    description: Update an existing account operation in the system
#  ##------------------------------------------------End update AccountOperationDto
#########################################################################################################################
#  ##------------------------------------------------Start Create CashOperationDto
  /account/bm/v1/cashoperation/create:
    post:
      summary: Path used to save a new CashOperation in the system to have history of all cash operations in the system
      operationId: saveCashOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOperationDto'
      responses:
        '200':
          description: CashOperation saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to save a cash operation for this system
    description: Add or save a new CashOperation in the system
#  ##------------------------------------------------End Create CashOperationDto
#  ##------------------------------------------------Start delete CashOperationDto
  /account/bm/v1/cashoperation/delete/{id}:
    delete:
      summary: Path used to delete an cash operation in the system with its id
      operationId: deleteCashOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the CashOperation to delete. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: CashOperation deleted successfully
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to delete an cash operation for this system
    description: Delete an existing cash operation in the system
#  ##------------------------------------------------End delete CashOperationDto
#  ##------------------------------------------------Start get by id CashOperationDto
  /account/bm/v1/cashoperation/getby/{id}:
    get:
      summary: Find an CashOperation in the system by its id
      operationId: getCashOperationById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: The id that represent the CashOperation found. It's compulsory if not the operation can't proceed
      responses:
        '200':
          description: CashOperation found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOperationDto'
        '400':
          description: Bad request. Operation ID must be an integer and larger than 0.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to find an CashOperation for this system
    description: Find an existing CashOperation in the system
#  ##------------------------------------------------End get by id CashOperationDto
#  ##------------------------------------------------Start getList CashOperationDto
  /account/bm/v1/cashoperation/list:
    post:
      summary: Path used to list cashoperation that respect certain criteria. A criteria is an instance of a Filter object
      operationId: getCashOperationList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: CashOperation list found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/CashOperationDto'
#  ##------------------------------------------------End getList CashOperationDto
#  ##------------------------------------------------Start getPage CashOperationDto
  /account/bm/v1/cashoperation/page:
    post:
      summary: Path used to list CashOperation page by page that respect certain criteria. With the Page object, we can configure the page number and size that we want
      operationId: getCashOperationPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest' #FilterRequest
      responses:
        '200':
          description: CashOperation page found successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PageofCashOperationDto'
#  ##------------------------------------------------End getPage CashOperationDto
#  ##------------------------------------------------Start update CashOperationDto
  /account/bm/v1/cashoperation/update:
    put:
      summary: Path used to update or modify an existing CashOperation in the system
      operationId: updateCashOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOperationDto'
      responses:
        '200':
          description: CashOperation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOperationDto'
        '400':
          description: Bad request. There is something wrong in the request.
        '401':
          description: Authorization information is missing or invalid.
        '403':
          description: The user who ask the ressource is Forbidden.
        '404':
          description: The expected ressource is not found.
        '500':
          description: Unexpected error at the server side.
    summary: Represents a route used to update an cash operation for this system
    description: Update an existing cash operation in the system
#  ##------------------------------------------------End update CashOperationDto
########################################################################################################################
########################################################################################################################


components:
  schemas:
    TestDto:
      type: object
      properties:
        test:
          type: string
    AddressDto:
      type: object
      description: 'Address of a user, an enterprise or a shop'
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          minLength: 5
          maxLength: 30
          exclusiveMinimum: false
          exclusiveMaximum: false
          example: 'abc@gmail.com'
        numtel1:
          type: string
          nullable: false
          minLength: 9
          maxLength: 13
          exclusiveMinimum: false
          exclusiveMaximum: false
          example: '678470262'
        numtel2:
          type: string
          minLength: 9
          maxLength: 13
          exclusiveMinimum: false
          exclusiveMaximum: false
        numtel3:
          type: string
          minLength: 9
          maxLength: 13
          exclusiveMinimum: false
          exclusiveMaximum: false
        quarter:
          type: string
          minLength: 3
          maxLength: 25
          exclusiveMinimum: false
          exclusiveMaximum: false
        town:
          type: string
          minLength: 3
          maxLength: 25
          exclusiveMinimum: false
          exclusiveMaximum: false
        country:
          type: string
          minLength: 3
          maxLength: 25
          exclusiveMinimum: false
          exclusiveMaximum: false
        localisation:
          type: string
          minLength: 1
          maxLength: 25
          exclusiveMinimum: false
          exclusiveMaximum: false
          description: 'The path of the resource or the image that represent the localisatiuon plan'
      required:
        - email
        - numtel1
    Filter:
      type: object
      description: 'Different filter used to filter the userbm result list'
      properties:
        filterColumn:
          type: string
        filterValue:
          type: string
        filterOperator:
          type: string
          enum:
            - EQUAL
            - LIKE
            - GREATER THAN
            - GREATER OR EQUAL
            - LOWER THAN
            - LOWER OR EQUAL
            - BETWEEN
          example: EQUAL
    Orderby:
      type: object
      description: 'Different sort criteria'
      properties:
        sortColumn:
          type: string
        sortDirection:
          type: string
          enum:
            - ASC
            - DESC
    Pagebm:
      type: object
      properties:
        pagenum:
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        pagesize:
          type: integer
          format: int32
          minimum: 10
          exclusiveMinimum: false
    FilterRequest:
      type: object
      description: 'Model used to precise search criteria and sort criteria'
      properties:
        filters:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Filter'
        logicOperator:
          type: string
          enum:
            - AND
            - OR
        orderby:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Orderby'
        page:
          type: object
          $ref: '#/components/schemas/Pagebm'
    UserbmDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userLogin:
          type: string
          minLength: 3
          maxLength: 15
          nullable: false
          example: login
        userCni:
          type: string
          minLength: 9
          maxLength: 17
          example: 107235260
        userPassword:
          type: string
          minLength: 4
          nullable: false
          writeOnly: true # Used in POST/PUT/PATCH, not returned by GET
          example: password
        userRepassword:
          type: string
          minLength: 4
          nullable: false
          writeOnly: true # Used in POST/PUT/PATCH, not returned by GET
          example: password
        userName:
          type: string
          minLength: 2
          maxLength: 30
          nullable: false
          example: userName
        userSurname:
          type: string
          minLength: 2
          maxLength: 30
        userDob:
          type: string
          format: date
          minLength: 10
          maxLength: 19
        userPicture:
          type: string
          minLength: 1
          maxLength: 15
        userState:
          type: string
          enum:
            - Activated
            - Deactivated
            - Connected
            - Disconnected
        userAddress:
          type: object
          $ref: '#/components/schemas/AddressDto'
      required:
        - bmLogin
        - bmName
        - bmState
        - bmAddress
        - bmPassword
    PageofUserbmDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 1
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserbmDto'
    EnterpriseDto:
      type: object
      description: 'An enterprise which can contain multiple pointofsale all manage in the system'
      properties:
        id:
          type: integer
          format: int64
        entRegime:
          type: string
          enum:
            - IL
            - SI
            - SARL
            - SA
            - GRP
          example: IL
        entSocialreason:
          type: string
          maxLength: 30
        entDescription:
          type: string
          maxLength: 256
        entNiu:
          type: string
          minLength: 3
          maxLength: 15
        entName:
          type: string
          minLength: 2
          maxLength: 30
          example: entName
        entAcronym:
          type: string
          minLength: 1
          maxLength: 15
        entLogo:
          type: string
    PageofEnterpriseDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/EnterpriseDto'
    CurrencyDto:
      type: object
      description: 'A currency used in the system'
      properties:
        id:
          type: integer
          format: int64
        currencyName:
          type: string
          maxLength: 30
          nullable: false
          example: franc cfa
        currencyAbbreviation:
          type: string
          maxLength: 5
          nullable: false
          example: F cfa
    PageofCurrencyDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          example: 10
          minimum: 1
          exclusiveMinimum: false
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CurrencyDto'
    CurrencyconversionDto:
      type: object
      description: 'A conversion rule used to convert one currency in another'
      properties:
        id:
          type: integer
          format: int64
        conversionFactor:
          type: number
          format: double
        currencySourceId:
          type: integer
          format: int64
        currencyDestinationId:
          type: integer
          format: int64
    PageofCurrencyconversionDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CurrencyconversionDto'
    PointofsaleDto:
      type: object
      description: 'A pointofsale object of the system'
      properties:
        id:
          type: integer
          format: int64
        posName:
          type: string
          example: posName
        posAcronym:
          type: string
        posDescription:
          type: string
        posBalance:
          type: number
          format: double
        posEnterpriseId:
          type: integer
          format: int64
        posAddress:
          type: object
          $ref: '#/components/schemas/AddressDto'
        posCurrency:
          type: object
          $ref: '#/components/schemas/CurrencyDto'
    PageofPointofsaleDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PointofsaleDto'
    RoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleName:
          type: string
          minLength: 3
          maxLength: 20
          nullable: false
          example: Admin
        roleDescription:
          type: string
          maxLength: 256
        roleType:
          type: string
          enum:
            - ADMINBM
            - ADMINENTERPRISE
            - EMPLOYE
          example: ADMINBM
        rolePosId:
          type: integer
          format: int64
        roleEntId:
          type: integer
          format: int64
    PageofRoleDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/RoleDto'
    PermissionDto:
      type: object
      description: 'A permission that really give right to act on an object of the system'
      properties:
        id:
          type: integer
          format: int64
        permissionName:
          type: string
        permissionDescription:
          type: string
      required:
        - permissionName
    PageofPermissionDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PermissionDto'
    UserbmRoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userbmId:
          type: integer
          format: int64
        roleId:
          type: integer
          format: int64
        permissions:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PermissionDto'
        required:
          - userbm
          - role
    UserbmRolePermissionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userbmroleId:
          type: integer
          format: int64
        permissionId:
          type: integer
          format: int64
        operation:
          type: string
          enum:
            - ADD
            - REMOVE
          example: ADD
    PageofUserbmRoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true # Returned by GET, not used in POST/PUT/PATCH
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserbmRoleDto'
    TokenDto:
      type: object
      description: 'A token to open a session on the system'
      properties:
        id:
          type: integer
          format: int64
        tokenValue:
          type: string
        tokenType:
          type: string
          enum:
            - Bearer
            - Jwt
        expired:
          type: boolean
        revoked:
          type: boolean
        userbmId:
          type: integer
          format: int64
        required:
          - tokenValue
          - tokenType
          - tokenUserbmId
    UnitDto:
      type: object
      description: 'A selling unit of product formated in the system'
      properties:
        id:
          type: integer
          format: int64
        unitName:
          type: string
          example: unitName
        unitAbbreviation:
          type: string
          example: UN
        unitPosId:
          type: integer
          format: int64
    PageofUnitDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UnitDto'
    UnitconversionDto:
      type: object
      description: 'A conversion rule used to convert one unit in another'
      properties:
        id:
          type: integer
          format: int64
        conversionFactor:
          type: number
          format: double
        unitSourceId:
          type: integer
          format: int64
        unitDestinationId:
          type: integer
          format: int64
    PageofUnitconversionDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UnitconversionDto'
    CategoryDto:
      type: object
      description: 'A category of product in the system'
      properties:
        id:
          type: integer
          format: int64
        catName:
          type: string
          minLength: 2
          maxLength: 50
          nullable: false
          example: catName
        catShortname:
          type: string
          minLength: 2
          maxLength: 20
        catCode:
          type: string
          minLength: 3
          maxLength: 7
          example: CA000
        catDescription:
          type: string
          maxLength: 256
        catParentId:
          type: integer
          format: int64
        catPosId:
          type: integer
          format: int64
        required:
          - catName
          - catPosId
    PageofCategoryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CategoryDto'
    FormatDto:
      type: object
      description: 'A format used to format product in the system'
      properties:
        id:
          type: integer
          format: int64
        formatName:
          type: string
          example: formatName
        formatCapacity:
          type: number
          format: double
        formatPosId:
          type: integer
          format: int64
    PageofFormatDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/FormatDto'
    ProductDto:
      type: object
      description: 'A product in the system'
      properties:
        id:
          type: integer
          format: int64
        prodName:
          type: string
          example: prodName
        prodCode:
          type: string
          example: P0000
        prodDescription:
          type: string
        prodAlias:
          type: string
        prodPerishable:
          type: boolean
          example: false
        prodCatId:
          type: integer
          format: int64
    PageofProductDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ProductDto'
    ProductformatedDto:
      type: object
      description: 'A product formated in the system'
      properties:
        id:
          type: integer
          format: int64
        pfPicture:
          type: string
        pfProductId:
          type: integer
          format: int64
        pfFormatId:
          type: integer
          format: int64
    PageofProductformatedDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ProductformatedDto'
    BasepriceDto:
      type: object
      description: 'A product formated in the system'
      properties:
        id:
          type: integer
          format: int64
        bpCode:
          type: string
          example: BP0001
        bpPurchaseprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        bpWholeprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        bpSemiwholeprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        bpDetailsprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        bpPrecompte:
          type: number
          format: double
          example: 0
        bpRistourne:
          type: number
          format: double
          example: 0
        bpCurrency:
          type: object
          $ref: '#/components/schemas/CurrencyDto'
        bpPosId:
          type: integer
          format: int64
    ArticleDto:
      type: object
      description: 'A article in the system'
      properties:
        id:
          type: integer
          format: int64
        artCode:
          type: string
          example: A0000
        artName:
          type: string
          example: artName
        artShortname:
          type: string
        artDescription:
          type: string
        artThreshold:
          type: number
          format: double
          example: 0
        artLowlimitwholesale:
          type: number
          format: double
          example: 30
        artlowlimitSemiwholesale:
          type: number
          format: double
          example: 25
        artQuantityinstock:
          type: number
          format: double
          example: 0
        artPfId:
          type: integer
          format: int64
        artUnitId:
          type: integer
          format: int64
        artBasepriceId:
          type: integer
          format: int64
        artPosId:
          type: integer
          format: int64
    PageofArticleDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ArticleDto'
    SpecialpriceDto:
      type: object
      description: 'A Specialprice in the system'
      properties:
        id:
          type: integer
          format: int64
        spCode:
          type: string
          example: SP0001
        spWholeprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        spSemiwholeprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        spDetailsprice:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        spRistourne:
          type: number
          format: double
          example: 0
        spPrecompte:
          type: number
          format: double
          example: 0
        spBasepriceId:
          type: integer
          format: int64
    ProviderDto:
      type: object
      description: 'A provider in the system'
      properties:
        id:
          type: integer
          format: int64
        providerName:
          type: string
          example: providerName
        providerAcronym:
          type: string
          example: PN
        providerDescription:
          type: string
        providerBalance:
          type: number
          format: double
          example: 0
        providerAddress:
          type: object
          $ref: '#/components/schemas/AddressDto'
        providerPosId:
          type: integer
          format: int64
    PageofProviderDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ProviderDto'
    SupplyinvoiceDto:
      type: object
      description: 'A Supply invoice in the system'
      properties:
        id:
          type: integer
          format: int64
        siCode:
          type: string
          example: SuI0000
        siComment:
          type: string
        siPicture:
          type: string
        siDeliverydate:
          type: string
          format: date-time
        siInvoicingdate:
          type: string
          format: date-time
        siTotalcolis:
          type: number
          format: double
          minimum: 1
          exclusiveMinimum: false
          example: 1
        siExpectedamount:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        siPaidamount:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
        siPaymentmethod:
          type: string
          enum:
            - Cash
            - Momo
            - Om
          example: Cash
        siPosId:
          type: integer
          format: int64
        siProviderId:
          type: integer
          format: int64
    PageofSupplyinvoiceDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          example: 10
          minimum: 1
          exclusiveMinimum: false
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SupplyinvoiceDto'
    ArrivalDto:
      type: object
      description: 'An arrival in the system'
      properties:
        id:
          type: integer
          format: int64
        deliveryQuantity:
          type: number
          format: double
          minimum: 0
          example: 1
          exclusiveMinimum: true
        arrivalDate:
          type: string
          format: date-time
        arrivalUnitprice:
          type: number
          format: double
          minimum: 0
          example: 1
          exclusiveMinimum: true
        arrivalType:
          type: string
          enum:
            - Standard
            - Divers
            - Cash
            - Cover
            - Damage
          example: Standard
        arrivalNature:
          type: string
          enum:
            - Standard
            - Divers
            - Cash
            - Cover
            - Damage
          example: Cash
        arrivalArticleId:
          type: integer
          format: int64
        arrivalInvoiceId:
          type: integer
          format: int64
    PageofArrivalDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          minimum: 0
          example: 10
          exclusiveMinimum: true
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ArrivalDto'
    InventoryDto:
      type: object
      description: 'An Inventory used in the system'
      properties:
        id:
          type: integer
          format: int64
        invComment:
          type: string
        invDate:
          type: string
          format: date-time
        invCode:
          type: string
          example: I0000
        invPosId:
          type: integer
          format: int64
    PageofInventoryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        pageSize:
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/InventoryDto'
    InventorylineDto:
      type: object
      description: 'An Inventory line in the system'
      properties:
        id:
          type: integer
          format: int64
        invlineComment:
          type: string
        realqteinStock:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
          example: 0
        logicqteinStock:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
          example: 0
        inventoryId:
          type: integer
          format: int64
        invlineArticleId:
          type: integer
          format: int64
    PageofInventorylineDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        pageSize:
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/InventorylineDto'
    PackagingDto:
      type: object
      description: 'A Packaging in the system'
      properties:
        id:
          type: integer
          format: int64
        packLabel:
          type: string
          example: packLabel
        packDescription:
          type: string
        packFirstcolor:
          type: string
        packPrice:
          type: number
          format: double
        packagingPosId:
          type: integer
          format: int64
        packagingProviderId:
          type: integer
          format: int64
    PageofPackagingDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PackagingDto'
    LoadingDto:
      type: object
      description: 'A Loading in the system'
      properties:
        id:
          type: integer
          format: int64
        loadCode:
          type: string
          example: L0000
        loadDate:
          type: string
          format: date-time
        loadreturnDate:
          type: string
          format: date-time
        loadExpectedamount:
          type: number
          format: double
          minimum: 1
          exclusiveMinimum: false
        loadPaidamount:
          type: number
          format: double
          minimum: 1
          exclusiveMinimum: false
        loadRemise:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
        loadReport:
          type: string
        loadOpen:
          type: boolean
        loadManagerId:
          type: integer
          format: int64
        loadSalerId:
          type: integer
          format: int64
        loadPosId:
          type: integer
          format: int64
    PageofLoadingDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/LoadingDto'
    LoadingdetailsDto:
      type: object
      description: 'A Loading details in the system'
      properties:
        id:
          type: integer
          format: int64
        quantityTaken:
          type: number
          format: double
          example: 1
        quantityReturn:
          type: number
          format: double
          example: 0
        ldArticleId:
          type: integer
          format: int64
        ldLoadingId:
          type: integer
          format: int64
    PageofLoadingdetailsDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/LoadingdetailsDto'
    PackagingdetailsDto:
      type: object
      description: 'A Packaging details in the system'
      properties:
        id:
          type: integer
          format: int64
        packagenumberUsed:
          type: integer
          format: int32
          example: 1
        packagenumberReturn:
          type: integer
          format: int32
          example: 1
        pdPackagingId:
          type: integer
          format: int64
        pdLoadingId:
          type: integer
          format: int64
    PageofPackagingdetailsDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PackagingdetailsDto'
    ClientDto:
      type: object
      description: 'A client in the system'
      properties:
        id:
          type: integer
          format: int64
        clientName:
          type: string
        clientOthername:
          type: string
        clientCni:
          type: string
        clientBalance:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
        clientPosId:
          type: integer
          format: int64
        clientAddress:
          type: object
          $ref: '#/components/schemas/AddressDto'
    PageofClientDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ClientDto'
    ClientSpecialpriceDto:
      type: object
      description: 'A client in the system'
      properties:
        id:
          type: integer
          format: int64
        appliedDate:
          type: string
          format: date-time
        clientId:
          type: integer
          format: int64
        specialpriceId:
          type: integer
          format: int64
        articleId:
          type: integer
          format: int64
    PageofClientSpecialpriceDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ClientSpecialpriceDto'
    SaleinvoiceDto:
      type: object
      description: 'A Sale invoice in the system'
      properties:
        id:
          type: integer
          format: int64
        siCode:
          type: string
          example: 0000
        siComment:
          type: string
        siInvoicingdate:
          type: string
          format: date-time
        siTotalcolis:
          type: number
          format: double
        siExpectedamount: #It can be a number of cover or damage. In that time the payment method must be cash
          type: number
          format: double
        siPaidamount:
          type: number
          format: double
        siPaymentmethod:
          type: string
          enum:
            - Cash
            - Momo
            - Om
          example: Cash
        siPosId:
          type: integer
          format: int64
    PageofSaleinvoiceDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SaleinvoiceDto'
    DeliveryDto:
      type: object
      description: 'A Delivery in the system which can contain multiple command'
      properties:
        id:
          type: integer
          format: int64
        deliveryCode:
          type: string
          example: D0001
        deliveryDate:
          type: string
          format: date-time
        deliveryComment:
          type: string
        deliveryState:
          type: string
          enum:
            - InEditing
            - Edited
            - Delivery
          example: InEditing
        deliveryDeliverId:
          type: integer
          format: int64
        deliveryPosId:
          type: integer
          format: int64
    PageofDeliveryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/DeliveryDto'
    DeliverydetailsDto:
      type: object
      description: 'A Deliverydetails in the system which can contain multiple command'
      properties:
        id:
          type: integer
          format: int64
        packageUsed:
          type: integer
          format: int32
          example: 0
        packageReturn:
          type: integer
          format: int32
          example: 0
        ddPackagingId:
          type: integer
          format: int64
        ddDeliveryId:
          type: integer
          format: int64
    PageofDeliverydetailsDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/DeliverydetailsDto'
    CommandDto:
      type: object
      description: 'A Command in the system'
      properties:
        id:
          type: integer
          format: int64
        cmdCode:
          type: string
          example: C0000
        cmdDate:
          type: string
          format: date-time
        cmdComment:
          type: string
        cmdState:
          type: string
          enum:
            - InEditing
            - Edited
            - InDelivery
            - Delivery
            - Cash
            - Cover
            - Damage
          example: InEditing
        cmdNature:
          type: string
          enum:
            - InEditing
            - Edited
            - InDelivery
            - Delivery
            - Cash
            - Cover
            - Damage
          example: Cash
        cmdDeliveryId:
          type: integer
          format: int64
        cmdLoadingId:
          type: integer
          format: int64
        cmdClientId:
          type: integer
          format: int64
        cmdSalerId:
          type: integer
          format: int64
        cmdInvoiceId:
          type: integer
          format: int64
        cmdPosId:
          type: integer
          format: int64
    PageofCommandDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          integer: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CommandDto'
    SaleDto:
      type: object
      description: 'A Sale in the system'
      properties:
        id:
          type: integer
          format: int64
        saleQuantity:
          type: number
          format: double
        saleComment:
          type: string
        saleFinalprice:
          type: number
          format: double
        saleType:
          type: string
          enum:
            - Details
            - Permutation
            - Semiwhole
            - Whole
          example: Whole
        saleCommandId:
          type: integer
          format: int64
        saleArticleId:
          type: integer
          format: int64
    PageofSaleDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SaleDto'
    BackinDto:
      type: object
      description: 'A Backin in the system which represent articles return back by a client after delivery'
      properties:
        id:
          type: integer
          format: int64
        biDate:
          type: string
          format: date-time
        biComment:
          type: string
        biCommandId:
          type: integer
          format: int64
        biSalerId:
          type: integer
          format: int64
    PageofBackinDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/BackinDto'
    BackindetailsDto:
      type: object
      description: 'A Backin in the system which represent articles return back by a client after delivery'
      properties:
        id:
          type: integer
          format: int64
        bidQuantity:
          type: number
          format: double
          example: 0
        bidComment:
          type: string
        bidArticleId:
          type: integer
          format: int64
        bidBackinId:
          type: integer
          format: int64
    PageofBackindetailsDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
        pageSize:
          type: integer
          format: int32
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/BackindetailsDto'
    AccountDto:
      type: object
      description: 'An account for pointofsale, provider or a client in the system'
      properties:
        id:
          type: integer
          format: int64
        coverNumber:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        damageNumber:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        packageNumber:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        accountType:
          type: string
          enum:
            - Client
            - Pos
            - Provider
          example: Pos
        accountClientId:
          type: integer
          format: int64
        accountPosId:
          type: integer
          format: int64
        accountProviderId:
          type: integer
          format: int64
        accountArticleId:
          type: integer
          format: int64
        accountPackagingId:
          type: integer
          format: int64
    PageofAccountDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          example: 0
        pageSize:
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
          example: 10
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/AccountDto'
    OperationDto:
      type: object
      description: 'An operation in the system'
      properties:
        id:
          type: integer
          format: int64
        opDate:
          type: string
          format: date-time
        opObject:
          type: string
        opDescription:
          type: string
        opType:
          type: string
          enum:
            - Credit
            - Withdrawal
            - Change
            - Others
          example: Credit
    PageofOperationDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          example: 10
          minimum: 1
          exclusiveMinimum: false
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/OperationDto'
    AccountOperationDto:
      type: object
      description: 'An account operation in the system. It concerns only Cover, Damage and Packaging'
      properties:
        id:
          type: integer
          format: int64
        quantityinMvt:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          example: 1
        operationId:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int64
    CashOperationDto:
      type: object
      description: 'A cash account operation in the system it concerns only operation on cash, momo or OM'
      properties:
        id:
          type: integer
          format: int64
        amountinMvt:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          example: 1
        amountSource:
          type: string
          enum:
            - CASH_DESK
            - OM_ACCOUNT
            - MOMO_ACCOUNT
          example: CASH_DESK
        amountDestination:
          type: string
          enum:
            - CASH_DESK
            - OM_ACCOUNT
            - MOMO_ACCOUNT
          example: MOMO_ACCOUNT
        operationId:
          type: integer
          format: int64
        posConcernedId:
          type: integer
          format: int64
        clientConcernedId:
          type: integer
          format: int64
        providerConcernedId:
          type: integer
          format: int64
    PageofAccountOperationDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          example: 10
          minimum: 1
          exclusiveMinimum: false
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/AccountOperationDto'
    PageofCashOperationDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
          example: 0
          minimum: 0
          exclusiveMinimum: false
        pageSize:
          type: integer
          format: int32
          example: 10
          minimum: 1
          exclusiveMinimum: false
        content:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CashOperationDto'
    AuthRequest:
      type: object
      properties:
        login:
          type: string
          nullable: false
        password:
          type: string
          format: password
          nullable: false
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          nullable: false














